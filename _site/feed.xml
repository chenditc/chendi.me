<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Di's Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 08 Sep 2019 22:54:02 +0800</pubDate>
    <lastBuildDate>Sun, 08 Sep 2019 22:54:02 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Sync Outlook Calendar And Conference Room</title>
        <description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;由于系统A实现上的需求，我们需要将 outlook 中的会议室的使用信息，以及对应每个用户的日程信息同步至内部开发的系统A中。主要需求包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;outlook上的会议室使用情况涉及到不使用系统A的用户，所以outlook上的会议室预约信息会比系统A中的多，我们需要把这些额外的预约信息同步至系统A中，这样系统A中的用户在预约会议室时，可以考虑到其他用户的冲突。&lt;/li&gt;
  &lt;li&gt;用户已经习惯使用 outlook 将日程和会议室信息同步至手机端，所以系统A中增加的日程需要同步至 outlook 中，包括会议室订阅也需要增加。&lt;/li&gt;
  &lt;li&gt;当系统A中日程的属性变化时，outlook中需要对应发生变化。&lt;/li&gt;
  &lt;li&gt;当outlook中日程的属性发生变化时，系统A中也需要对应发生变化&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;探索调研&quot;&gt;探索调研&lt;/h2&gt;

&lt;h3 id=&quot;搭建测试环境&quot;&gt;搭建测试环境&lt;/h3&gt;

&lt;p&gt;为了便于测试，我们需要搭建一套基于 outlook 的邮件以及会议室系统，这里需要以下资源：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Windows Server 2012r2.
    &lt;ul&gt;
      &lt;li&gt;2 核心&lt;/li&gt;
      &lt;li&gt;16G 内存&lt;/li&gt;
      &lt;li&gt;300G 磁盘&lt;/li&gt;
      &lt;li&gt;云服务商上对外 25 端口默认是禁止使用的，需要单独申请开放，例如 &lt;a href=&quot;https://help.aliyun.com/knowledge_detail/56130.html&quot;&gt;阿里云25端口解封&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 1 中的 windows 服务器上配置 AD 以及 Exchange Server 2016&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;需要配置一个域名以及 DNS 记录
    &lt;ul&gt;
      &lt;li&gt;需要给 exchange 服务器挂一个域名，例如 mail.abc.com，这个会作为邮件发送的服务器地址。&lt;/li&gt;
      &lt;li&gt;需要配置 autodiscover 域名，例如 autodiscover.abc.com，这个域名会用来给客户端自动发现邮箱配置。&lt;/li&gt;
      &lt;li&gt;需要配置一条 MX 记录，主机名 @，记录指向 mail.abc.com&lt;/li&gt;
      &lt;li&gt;域名最好能申请 CA 签发的正规 https 证书，否则用自签名证书可能会遇到诸多不便。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;配置用户以及模拟权限&quot;&gt;配置用户以及模拟权限&lt;/h3&gt;

&lt;p&gt;我们需要为系统A建立一个服务账号，这个账号的会使用代码进行登录。同时，我们希望这个账号可以代所有其他用户账号管理会议日程信息，所以我们需要赋予这个账号 Impersonation 权限，也叫模拟权限。&lt;/p&gt;

&lt;p&gt;我们可以通过后台管理 ecp 界面上的权限管理配置服务账号的权限：
&lt;a href=&quot;/img/in-post/outlook-calendar/pic1.png&quot;&gt;&lt;img src=&quot;/img/in-post/outlook-calendar/pic1.png&quot; alt=&quot;pic1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中配置的 ApplicationImpersonation 会赋予其模拟他人账号登录的权限
&lt;a href=&quot;/img/in-post/outlook-calendar/pic2.png&quot;&gt;&lt;img src=&quot;/img/in-post/outlook-calendar/pic2.png&quot; alt=&quot;pic2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同时，我们也需要建立几个会议室邮箱，这样我们才能有公共的 “会议室” 以供预定。&lt;/p&gt;

&lt;h3 id=&quot;exchangelib的使用&quot;&gt;exchangelib的使用&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ecederstrand/exchangelib&quot;&gt;exchangelib&lt;/a&gt; 提供了一个可以使用 python 代码访问 exchange 服务的库，并且在使用上去 Django 的 ORM 极其类似。&lt;/p&gt;

&lt;p&gt;安装：
&lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install exchangelib&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;登陆-exchange-账号&quot;&gt;登陆 exchange 账号&lt;/h4&gt;

&lt;p&gt;如果 exchange 服务器使用的是自签名的 https 证书，则需要跳过 https 证书验证环节：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 自签名服务器需要跳过 HTTPS 的证书检查
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;exchangelib.protocol&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoVerifyHTTPAdapter&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BaseProtocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTP_ADAPTER_CLS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoVerifyHTTPAdapter&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urllib3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disable_warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;声明登陆服务器所使用的版本号、账号、密码、服务器连接地址：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'administrator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'xxxxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mail.abc.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NTLM&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以用户 abc 的身份登陆，IMPERSONATION 字段表示以用之前配置的账号密码，模拟用户 zhangsan@abc.com 登陆：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'zhangsan@abc.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMPERSONATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;创建新的日程&quot;&gt;创建新的日程&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 新建一个日程对象
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_meeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalendarItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 需要绑定一个发起人账号
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 默认加入该账号的日历文件夹
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EWSDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#带时区的开始和结束时间
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EWSDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#带时区的开始和结束时间
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;final test 6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 会议名称
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello from Python'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 会议内容
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'2楼广寒宫'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 会议室地点，只需要文字描述，与实际会议室账号无关
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;required_attendees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'abc@abc.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;guanghan@abc.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_meeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_meeting_invitations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEND_TO_ALL_AND_SAVE_COPY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 切换至会议室账号并接受邀请
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;room_account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'guanghan@abc.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMPERSONATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;room_account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-datetime_received'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;如果需要对这个日程绑定一个会议室，需要将这个会议室对应的邮箱加到参与者列表里，然后再更换登录账号，接受所有的会议邀请。&lt;/li&gt;
  &lt;li&gt;保存时需要增加参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;send_meeting_invitations=SEND_TO_ALL_AND_SAVE_COPY&lt;/code&gt;，否则参与者不会收到邀请信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;查询日程并以某条件过滤&quot;&gt;查询日程并以某条件过滤&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EWSDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EWSDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_modified_time__range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 每个会议都有一个 ID
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 会议标题
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查询会议室的使用情况&quot;&gt;查询会议室的使用情况&lt;/h4&gt;

&lt;p&gt;会议室和用户没有本质上的区别。可以通过 Impersonation 登录会议室的邮箱账号，查看其日历上的内容来获取使用情况。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EWSDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EWSDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_modified_time__range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 每个会议都有一个 ID
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 会议开始时间
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 会议结束时间
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取到该会议室的使用情况后，就可以检查该时间段内是否有人使用了。&lt;/p&gt;

&lt;h3 id=&quot;系统设计&quot;&gt;系统设计&lt;/h3&gt;

&lt;h4 id=&quot;outlook-中会议室使用情况同步至系统内&quot;&gt;outlook 中会议室使用情况同步至系统内&lt;/h4&gt;

&lt;p&gt;为了保证会议室使用情况的实时以及查询的稳定性，我们定期将会议室的使用情况同步至系统内&lt;/p&gt;

&lt;p&gt;同步任务需要实现：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;系统A中的会议室使用记录内增加 outlook id，字符串类型，用于记录 outlook 中的会议ID&lt;/li&gt;
  &lt;li&gt;每次查询获取所有会议室最近一段时间内的日程列表，使用 last_modifed_time 字段进行过滤，只取上次同步任务之后变更的日程，与系统内的记录对比并更新&lt;/li&gt;
  &lt;li&gt;如果有系统A中不存在的日程，标记为外部创建日程即可&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果有同步需求，也可以通过代码手动调用同步任务触发。
正常情况下设置定时任务，每10分钟同步一次即可。&lt;/p&gt;

&lt;h4 id=&quot;系统中增加日程&quot;&gt;系统中增加日程&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;检查对应会议室在 xx 时间段内是否有被预定&lt;/li&gt;
  &lt;li&gt;绑定会议室后，系统A内创建会议室日程。&lt;/li&gt;
  &lt;li&gt;日程保存时，检测是否有 outlook 日程绑定，同时检测 outlook 日程是否仍然存在，如果不存在，则创建outlook日程并绑定会议室，outlook中创建日程的用户与系统登录用户一致。&lt;/li&gt;
  &lt;li&gt;绑定 outlook 会议室的操作即发送会议邀请给对应的会议室账号，再登陆会议室账号接受邀请即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;系统中修改日程&quot;&gt;系统中修改日程&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;系统中修改日程属性，如开始时间、结束时间、会议室等。&lt;/li&gt;
  &lt;li&gt;修改后在保存时通过会议 ID 查询 outlook 中会议的对象，修改对应字段后保存 outlook 对象即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;系统中删除日程&quot;&gt;系统中删除日程&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;系统内标记日程位删除，同时 soft delete 删除 outlook 中的日程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;outlook 对于会议室的设计感觉像是有历史遗留问题，每个会议室都必须分配一个邮箱，同时用邮箱来管理。但是目前来看，这个设计也有可取之处，就是对于会议室的操作可以复用用户的操作，学习成本更低一些。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果你看到这里，一定是真爱！欢迎看看我的其他 &lt;a href=&quot;http://chendi.me/&quot;&gt;blog&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Sep 2019 08:15:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/08/sync-outlook-calendar/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/08/sync-outlook-calendar/</guid>
        
        <category>Tech</category>
        
        
      </item>
    
      <item>
        <title>Leverage Datalake cloud service in ETL</title>
        <description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;在数据采集和分析的流程中，目前有3个痛点不好解决：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;数据采集之后是以多个小 json 文件储存在类似 AWS S3 的对象储存中的，当我们要核验数据的特征，例如最大值，数据总数之类的，需要使用 MapReduce 或者 spark 才能实现，而这个操作门槛相对较高。并且由于数据是以多个小文件的形式存在，批处理脚本的执行效率低，每次都需要较长时间才能完成一个简单的数据查询。&lt;/li&gt;
  &lt;li&gt;数据清洗的时候不了解数据特性，例如空值，异常值的情况，所以容易在清洗过程中欠缺对异常情况的处理。&lt;/li&gt;
  &lt;li&gt;数据分析的迭代周期长，出了问题回溯困难。因为统计需要使用专业的数据处理脚本，所以需求提出之后，需要经过代码实现，测试，批量执行之后才能看到结果，迭代周期往往以天计算。同时某个数据的统计值与预期不符时，缺少合适的工具帮助回溯到原始数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里使用的是阿里云 Data Lake Analytics 服务帮助解决这个问题。同时用阿里云的 OSS 作为数据源储存。&lt;/p&gt;

&lt;p&gt;Data Lake Analytics 将一些简单的 ETL 任务封装成 SAAS 服务了，所以绝大部分的操作是在阿里云的控制台上执行的。&lt;/p&gt;

&lt;h2 id=&quot;简化将小文件合并成大文件的过程&quot;&gt;简化将小文件合并成大文件的过程&lt;/h2&gt;

&lt;p&gt;首先，我们来解决痛点1。&lt;/p&gt;

&lt;p&gt;对于小文件查询慢的问题，传统的解决方法是写一个 spark 的数据清洗脚本来将其转为 parquet 格式，然后再用 zepplin 之类的工具进行查询分析。&lt;/p&gt;

&lt;p&gt;Data Lake Analytics 的处理分成以下几个步骤：&lt;/p&gt;

&lt;h3 id=&quot;建立一个外表连接到需要处理的-oss-路径&quot;&gt;建立一个外表连接到需要处理的 OSS 路径。&lt;/h3&gt;

&lt;p&gt;这里可以使用阿里云的建表向导来进行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/in-post/aliyun-datalake/datalake1.png&quot;&gt;&lt;img src=&quot;/img/in-post/aliyun-datalake/datalake1.png&quot; alt=&quot;datalake1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;填入几个关于数据源的信息后，会自动生成一个建表的 schema。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/in-post/aliyun-datalake/datalake2.png&quot;&gt;&lt;img src=&quot;/img/in-post/aliyun-datalake/datalake2.png&quot; alt=&quot;datalake2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里建议大家手动审核调整一下建表的 sql，然后在 sql 界面进行建表。&lt;/p&gt;

&lt;h3 id=&quot;使用-data-lake-的-mysql-接口连接其数据库&quot;&gt;使用 Data Lake 的 MySQL 接口连接其数据库&lt;/h3&gt;

&lt;p&gt;在阿里云控制台可以获取到连接的参数信息。建议根据 &lt;a href=&quot;https://help.aliyun.com/document_detail/98381.html?spm=a2c4g.11186623.6.557.6aff7b8cAX4zoH&quot;&gt;文档&lt;/a&gt; 配置子账号并用子账号创建新表。&lt;/p&gt;

&lt;p&gt;连接上之后，我们就可以用刚才阿里云生成的建表 sql 创建一个新的外表了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/in-post/aliyun-datalake/datalake3.png&quot;&gt;&lt;img src=&quot;/img/in-post/aliyun-datalake/datalake3.png&quot; alt=&quot;datalake3&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;建立-parquet-格式的外表&quot;&gt;建立 Parquet 格式的外表&lt;/h3&gt;

&lt;p&gt;使用前面阿里云建表向导提供的建表 SQL，我们可以做一些修改，例如将 &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE AS JSON&lt;/code&gt; 改为 &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE AS PARQUET&lt;/code&gt; 然后建立一个指向新的 OSS 路径的外表。&lt;/p&gt;

&lt;p&gt;然后我们可以使用下面的 SQL 将 JSON 格式的文件导入到 PARQUET 格式的文件中去，完成小文件合并的任务。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*+run_async=true*/&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parquet_table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;记得加上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/*+run_async=true*/&lt;/code&gt; 标注，因为这个执行过程比较久，将其设置为异步执行可以避免由于 mysql 客户端超时导致的任务失败。&lt;/p&gt;

&lt;h2 id=&quot;在parquet文件上进行数据特性分析&quot;&gt;在Parquet文件上进行数据特性分析&lt;/h2&gt;

&lt;p&gt;当我们将数据从 json 文件插入至 parquet 文件后，我们就可以从 parquet 文件对应的表进行 sql 查询了。由于文件已经被合并成大的 parquet 文件，查询性能也会大大提高。&lt;/p&gt;

&lt;h2 id=&quot;回溯问题文件&quot;&gt;回溯问题文件&lt;/h2&gt;

&lt;p&gt;当我们发现数据的统计值不符合我们的预期时，往往需要回溯寻找出问题的原始数据是什么，Datalake 也是做这类工作的一个利器。&lt;/p&gt;

&lt;p&gt;当我们使用 OSS 作为外表进行查询时，我们可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$path&lt;/code&gt; 获取外表数据源的文件名称。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;如果你看到这里，一定是真爱！欢迎看看我的其他 &lt;a href=&quot;http://chendi.me/&quot;&gt;blog&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Jan 2019 16:15:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/28/leverage-datalake-service-in-etl/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/28/leverage-datalake-service-in-etl/</guid>
        
        <category>Tech</category>
        
        
      </item>
    
      <item>
        <title>Snappy-python is not fully compatible with hadoop-snappy</title>
        <description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;在我当前项目中，有一部分技术架构涉及到数据在 python 脚本中用 json + &lt;a href=&quot;https://github.com/google/snappy&quot;&gt;snappy&lt;/a&gt; 的格式压缩之后储存起来，json 是作为数据序列化的格式，而 snappy 则是作为数据压缩的格式。在下游处理中，spark 任务会读取这部分数据进行处理。这套方案理论上是没有问题的，在我们的调研中，也确认了 python 中上传的数据，在 spark 中可以被正确解读。但是在实际广泛使用时，我们发现有某些数据在 python 端能正常地被压缩以及解压，但是在 spark 端就报了下面的错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.lang.InternalError: Could not decompress data. Input is invalid.
at org.apache.hadoop.io.compress.snappy.SnappyDecompressor.decompressBytesDirect(Native Method) 
at org.apache.hadoop.io.compress.snappy.SnappyDecompressor.decompress(SnappyDecompressor.java:239)
at org.apache.hadoop.io.compress.BlockDecompressorStream.decompress(BlockDecompressorStream.java:88)
at org.apache.hadoop.io.compress.DecompressorStream.read(DecompressorStream.java:85)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里记录的是解决这个问题的过程和结果。&lt;/p&gt;

&lt;h2 id=&quot;分析错误原因&quot;&gt;分析错误原因&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;首先缩小一下问题出现的范围&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;这个错误大概在1万个文件中才会出现一次，并且我们将出错的文件重新用 python 库解压之后，spark 仍然无法解析。所以基本可以认定这个文件指出了 spark 和 python 中 snappy SDK 的一些不兼容之处。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;缩小测试用例，找出最小可以复现问题的测试用例&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;原始的错误文件大概有2.6MB，压缩之后是2.5MB，压缩比例很差。好在文件并不大，决定用二分法找出有问题的数据内容。在将数据分为两份之后，发现只有其中一份用 python sdk 压缩之后 spark 无法解析，另一份则没有问题。在不断缩小范围之后，定位到了一段 base64 encode 的数据上。这部分 base64 encode 的数据大概有1.5MB。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;构建最小可以复现问题的测试用例&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;在比较正常压缩文件和该错误压缩文件之后，发现 base64 encode 的数据几乎没有被压缩，原文和压缩后的文件几乎是相同的。此时我们大胆猜测，当压缩后的文件与原文相同时，snappy 解压时会因为找不到所需的元数据而报错。在编写了一个随机字符生成器后，我们基本验证了我们的猜测：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import random
import string
N=1000000
print(''.join(random.choices(string.ascii_uppercase + string.digits, k=N)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;并且在 N 在大于 100 万的情况下必然复现。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;寻找解决问题的方法&quot;&gt;寻找解决问题的方法&lt;/h2&gt;

&lt;h3 id=&quot;对比测试结果&quot;&gt;对比测试结果&lt;/h3&gt;
&lt;p&gt;在找到复现的 test case 之后，下一步我们要找问题的根源。对于一个序列化和反序列化的算法，不同语言的实现应该遵从同一套标准，那么同一段数据压缩后的二进制文件应该也是相同的。&lt;/p&gt;

&lt;p&gt;将 snappy-python 压缩后的文件命名为 python_result.snappy&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 -m snappy -t hadoop_snappy -c test.txt &amp;gt; test_python.txt.snappy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时我们还需要 hadoop-snappy 编译出来的二进制文件&lt;/p&gt;

&lt;h3 id=&quot;编译-hadoop-snappy-测试用例&quot;&gt;编译 hadoop-snappy 测试用例&lt;/h3&gt;
&lt;p&gt;hadoop-snappy 的源码在 &lt;a href=&quot;https://code.google.com/archive/p/hadoop-snappy/&quot;&gt;Hadoop snappy google code&lt;/a&gt;。可以从&lt;a href=&quot;https://storage.googleapis.com/google-code-archive-source/v2/code.google.com/hadoop-snappy/source-archive.zip&quot;&gt;这里&lt;/a&gt;下载源码。&lt;/p&gt;

&lt;p&gt;源码编译时需要先安装 snappy 库，同时配置 snappy 库的到 java 的 VM Options 中。例如我在 Mac OS 上用 brew 安装的 snappy。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install snappy
$ ls /usr/local/Cellar/snappy/1.1.7_1
AUTHORS              INSTALL_RECEIPT.json README.md            lib
COPYING              NEWS                 include
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;snappy 库的路径是 /usr/local/Cellar/snappy/1.1.7_1，那么就配置 -Dsnappy.prefix=/usr/local/Cellar/snappy/1.1.7_1&lt;/p&gt;

&lt;p&gt;同时要注意，老版本的 hadoop-snappy 有一个提示错误，当 snappy 格式错误时，提示的是找不到 snappy 库，可以用以下方式修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/native/src/org/apache/hadoop/io/compress/snappy/SnappyDecompressor.c&lt;/code&gt;，然后重新编译来解决。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   if (ret == SNAPPY_BUFFER_TOO_SMALL){
-    THROW(env, &quot;Ljava/lang/InternalError&quot;, &quot;Could not decompress data. Buffer length is too small.&quot;);
+    THROW(env, &quot;java/lang/InternalError&quot;, &quot;Could not decompress data. Buffer length is too small.&quot;);
   } else if (ret == SNAPPY_INVALID_INPUT){
-    THROW(env, &quot;Ljava/lang/InternalError&quot;, &quot;Could not decompress data. Input is invalid.&quot;);
+    THROW(env, &quot;java/lang/InternalError&quot;, &quot;Could not decompress data. Input is invalid.&quot;);
   } else if (ret != SNAPPY_OK){
-    THROW(env, &quot;Ljava/lang/InternalError&quot;, &quot;Could not decompress data.&quot;);
+    THROW(env, &quot;java/lang/InternalError&quot;, &quot;Could not decompress data.&quot;);
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译之后可以使用测试用例来触发 snappy 的压缩，测试用例在 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/test/java/org/apache/hadoop/io/compress/snappy/TestSnappyCodec.java&lt;/code&gt;。压缩之后我们得到了 test_java.txt.snappy&lt;/p&gt;

&lt;p&gt;我们比较一下 test_java.txt.snappy 和 test_python.txt.snappy，发现 test_python.txt.snappy 整个文件中，如果用 utf-8 编码格式打开，只有最开头有一段乱码的二进制头信息。但是 test_java.txt.snappy 则每隔 256K 就会有一段二进制头信息。&lt;/p&gt;

&lt;p&gt;在这时，我们可以初步断定是两个语言的头信息写入不一致导致的文件格式不兼容。&lt;/p&gt;

&lt;h3 id=&quot;查看源码&quot;&gt;查看源码&lt;/h3&gt;
&lt;p&gt;snappy 的压缩和代码在 java 中其实并不复杂，主要都集中在 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java/org/apache/hadoop/io/compress/snappy/&lt;/code&gt;，本质上是在 java 中将 byte 流读入后，将数据分块，再对每一块进行压缩。而我们看到的文件里的的二进制头信息其实就是每一块数据的元数据，例如每一块数据的长度等。那么是什么决定了数据块的默认大小呢？有两个变量可能会造成影响。&lt;/p&gt;

&lt;p&gt;一个是 DEFAULT_DIRECT_BUFFER_SIZE:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grep DEFAULT_DIRECT_BUFFER_SIZE src/main/java/org/apache/hadoop/io/compress/snappy/SnappyCompressor.java
$   private static final int DEFAULT_DIRECT_BUFFER_SIZE = 64 * 1024;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里是代码定义的默认大小，64K。但是在测试用例中我们发现，调整这个数值并不会改变最后生成的数据块大小。&lt;/p&gt;

&lt;p&gt;另一个是 IO_COMPRESSION_CODEC_SNAPPY_BUFFERSIZE_DEFAULT：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grep -b2 IO_COMPRESSION_CODEC_SNAPPY_BUFFERSIZE_DEFAULT src/main/java/org/apache/hadoop/io/compress/SnappyCodec.java
1527-
1528-  /** Default value for IO_COMPRESSION_CODEC_SNAPPY_BUFFERSIZE_KEY */
1598:  public static final int IO_COMPRESSION_CODEC_SNAPPY_BUFFERSIZE_DEFAULT =
1673-      256 * 1024;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个配置文件控制了在作为 Hadoop Codec 组件实例化时，使用的数据块大小。如果我们将这个值调为 256，我们会发现测试用例中数据块的分块确实变化了。&lt;/p&gt;

&lt;p&gt;这时候，我们可以大致明白，之所以 python-snappy 压缩的文件在 hadoop-snappy 中无法解析，其实本质上是因为 python-snappy 在一整个 256K 数据块中的任何一块地方生成元数据头，导致 hadoop-snappy 一次性读取进来的 256K 全是数据，没有数据块头，也就无法解析出对应的数据块长度，最终报了 “ Input is invalid.” 错误。&lt;/p&gt;

&lt;p&gt;那么为什么其他数据没问题， base64 的数据就会出问题呢？&lt;/p&gt;

&lt;p&gt;首先，并不是一定 256K 的位置才会生成一个数据块头信息，而是每一个可以被截断并压缩的数据块就会生成一个头信息。但是对于 base64 的文字，基本是原文读入，原文写出的，所以连续的 256K base64 编码数据中，如果没有强行截断的话，就不会生成数据头。这个应该是 python-snappy sdk 的一个bug，不过由于时间原因，没办法细看 python-snappy sdk 并修复这个问题。&lt;/p&gt;

&lt;h3 id=&quot;最终解决方法&quot;&gt;最终解决方法&lt;/h3&gt;
&lt;p&gt;首先我们尝试调大 hadoop-snappy 的解压区块大小，当 hadoop-snappy 的 IO_COMPRESSION_CODEC_SNAPPY_BUFFERSIZE_DEFAULT 设置为 512K 时，我们发现 python-snappy 压缩的 base64 encode 文件可以被正常解压。但是在 hadoop 集群上，这样有可能导致这样保存下来的 snappy.json 文件无法被其他未修改配置的 hadoop 组件读取。&lt;/p&gt;

&lt;p&gt;还有一个思路就是调小 python-snappy 的区块大小。虽然文档中没有提到修改的方式，但是从 API 的签名中我们发现，在 &lt;a href=&quot;https://github.com/andrix/python-snappy/blob/master/snappy/hadoop_snappy.py&quot;&gt;hadoop-snappy.py&lt;/a&gt; 文件中也定义了 &lt;code class=&quot;highlighter-rouge&quot;&gt;SNAPPY_BUFFER_SIZE_DEFAULT&lt;/code&gt; 变量，控制默认的区块大小。而在 stream_compress 函数的签名中也有 blocksize 变量，默认值就是 SNAPPY_BUFFER_SIZE_DEFAULT。所以只要在调用 stream_compress 的时候将 blocksize 调为 128K 即可。&lt;/p&gt;

&lt;p&gt;最后联调后发现，这个方法生成的 python-snappy 文件是可以被 hadoop-snappy 成功解析的。最后我们的解决方法就是在 stream_compress 设置 blocksize 为 128K。&lt;/p&gt;

&lt;h1 id=&quot;经验总结&quot;&gt;经验总结&lt;/h1&gt;

&lt;p&gt;首先这个问题其实本质上还是一个算法，多个语言实现导致的问题。虽然底层的压缩算法使用的是同一套库，但是上层数据块的切分实现可能有细微差别，导致这个问题的发生。这个问题的解决其实关键是有一个可以复现的测试用例，有了这个测试用例之后就能帮我们不断缩小问题的范围，最后找到一个相对实现起来比较容易的解决方案。&lt;/p&gt;

&lt;h2 id=&quot;题外话&quot;&gt;题外话&lt;/h2&gt;

&lt;p&gt;在看 Google snappy 的代码时，发现一个 &lt;a href=&quot;https://github.com/google/snappy/commit/824e6718b5b5a50d32a89124853da0a11828b25c&quot;&gt;commit&lt;/a&gt;。Google 的工程师在做 regression 性能测试的时候发现，LLVM 的一个内存对齐的相关改动，导致 snappy 的性能下降了 3%，这个改动影响到了多个 intel 架构。最后虽然没能理解出现的原因，但是强行在 x86 架构上增加一个补位元素，抵消了 LLVM 上游的副作用，使得 snappy 的性能恢复到 LLVM 修改之前。&lt;/p&gt;

&lt;p&gt;这看起来是个小优化，但是也看到了 Google 背后完整的基础架构，能支持工程师定期进行性能测试，并且将性能测试在不同架构上进行复现。确实厉害。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果你看到这里，一定是真爱！欢迎看看我的其他 &lt;a href=&quot;http://chendi.me/&quot;&gt;blog&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Nov 2018 05:15:00 +0800</pubDate>
        <link>http://localhost:4000/2018/11/11/snappy-python-incompatibility/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/11/snappy-python-incompatibility/</guid>
        
        <category>Tech</category>
        
        
      </item>
    
      <item>
        <title>App Store Review Tips</title>
        <description>&lt;h2 id=&quot;初衷&quot;&gt;初衷&lt;/h2&gt;

&lt;p&gt;这篇博客主要想记录一下 App Store 中审核遇到的一些问题，以及最终解决的方案，希望对后来者有一定帮助，也是对自己的经验总结。&lt;/p&gt;

&lt;p&gt;对于苹果开发者来说，App Store 的审核是一个对整体迭代效率影响极大的一个环节，但是绝大部分情况下，App Store 的审核还是比较客观效率的，所以不必将其视为洪水猛兽。&lt;/p&gt;

&lt;p&gt;这里主要讨论下面几个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#第三方登录&quot;&gt;第三方登录&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第三方支付与内购&quot;&gt;第三方支付与内购&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#网络以及服务不连通&quot;&gt;网络以及服务不连通&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#初版兼容性&quot;&gt;初版兼容性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#区分审核服务器&quot;&gt;区分审核服务器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#missing-infoplist-key&quot;&gt;Missing Info.plist key&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;第三方登录&quot;&gt;第三方登录&lt;/h2&gt;

&lt;p&gt;现在基本上每个游戏或者 app 都会开放第三方登录，并且可能第三方登录是 95% 用户使用的登录方式。我们也希望尽可能优化用户登录的体验，所以也希望用户使用第三方登录，而不是手机号验证码或者邮箱验证。所以我们的登录界面是这样的：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/in-post/app-store-review/01-app.jpeg&quot;&gt;&lt;img src=&quot;/img/in-post/app-store-review/01-app.jpeg&quot; alt=&quot;01-app&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是对于 App Store 审核员来说，有两个问题：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;审核员大概率是外国人，看不懂中文，也就看不懂右上角的手机登录入口。所以有可能会打回 App，理由是未提供自有账号登录系统。&lt;/li&gt;
  &lt;li&gt;审核员点击第三方登录按钮后，会跳转至第三方登录界面，对于审核员来说，变相要求其安装 QQ 或者微信这样的第三方程序，会以 “不得要求用户安装其他程序才能使用该程序” 理由打回。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于这个情况，我们想了两种解决方法：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;只提供账号密码登录的方式，弱化第三方登录的 UI 显著性。&lt;/li&gt;
  &lt;li&gt;在审核期间使 App 作出与线上服务器不同的表现，只展示账号密码登录的界面，等到审核通过后，再显示完整界面。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后我们权衡了一下采用了方法2，这样对于 UI 和用户体验，我们有更完整的掌控性。至于如何在审核期间使 App 作出与线上服务器不同的表现，见 &lt;a href=&quot;#区分审核服务器&quot;&gt;第五节 - 区分审核服务器&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;第三方支付与内购&quot;&gt;第三方支付与内购&lt;/h2&gt;

&lt;p&gt;在我们提交审核时，我们曾被以下理由打回过 2 次：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Guideline 3.1.1 - In-App Purchase&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;We noticed that your app contains a payment mechanism other than in-app purchase for digital content or to unlock features or functionality within your app, which is not appropriate for the App Store. In-app purchase is the only valid in-app payment mechanism for digital content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Continuing to hide functionality within your app or other dishonest acts may result in the removal of your apps from the App Store and termination of your Apple Developer Program membership and all associated memberships.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Next Steps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To resolve this issue, please remove all external or third-party payment mechanisms and implement in-app purchase to facilitate digital good transactions, including unlocking features or functionality within your app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you believe your use of an alternative payment mechanism is a permissible use case, please respond directly to this message in Resolution Center with detailed information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个理由其实理解起来很简单 “我们检测到你在 app 里用了第三方登录，你别管我们怎么检测的，但是你得把它给去了”。&lt;/p&gt;

&lt;p&gt;我们第一次遇到这个问题时，我们刚接入了集成各种第三方登录的 SDK - ShareSDK，在 ShareSDK 中包含了微信的 SDK，而微信的 SDK 中包含了微信支付的代码，苹果正是监测到这部分代码后，拒绝了对应的编译包。解决方法其实相对简单，只要将微信的 SDK 更换为不带微信支付的即可。&lt;/p&gt;

&lt;p&gt;我们第二次遇到这个问题是，就比较奇怪了，在前一次正常过审核的编译和此次编译之间，我们没有引入额外的第三方支付或者更改过 SDK 包。我们在 Resolution Center 回复质询了详细信息，但是苹果并没有给出更详细的反馈。当时我们有两个方案：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;提交 Appeal 审核申诉，声明我们没有使用第三方支付，并要求重新审核。&lt;/li&gt;
  &lt;li&gt;拆开 ipa 包，扫描可疑的 API，并将其剔除。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;方案1操作起来简单，但是很可能会拖很久，而且据说一旦提起 Appeal，审核将变得非常严格，很可能得不偿失。&lt;/p&gt;

&lt;p&gt;方案2操作的主动权掌握在我们手中，可以第一时间执行，也许当天就能找到问题所在，但是相对繁琐。淘宝上有类似的服务，价格大概为3000元。&lt;/p&gt;

&lt;p&gt;我们最终选择了方案2，方案2的执行过程如下：&lt;/p&gt;

&lt;h4 id=&quot;找到-ipa-包对应的符号表&quot;&gt;找到 ipa 包对应的符号表&lt;/h4&gt;

&lt;p&gt;为了找到与支付相关的代码，我们选择从符号表入手，xcode 打包 ipa 之后，在 archive 文件中可以找到二进制文件并提取出符号表。&lt;/p&gt;

&lt;p&gt;例如 archive 文件是： myapp.xcarchive&lt;/p&gt;

&lt;p&gt;那么对应的二进制文件路径在：
&lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.xcarchive/dSYMs/myapp.app.dSYM/Contents/Resources/DWARF/myapp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们可以使用 Unix 的 nm 工具获取到该二进制文件的对应符号表。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nm myapp.xcarchive/dSYMs/myapp.app.dSYM/Contents/Resources/DWARF/myapp &amp;gt; symbols&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;在符号表中找到函数名&quot;&gt;在符号表中找到函数名&lt;/h4&gt;

&lt;p&gt;我们关心的函数一般带有关键字 “pay”, “payment”，我们接着过滤出带有该关键字的函数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -i &quot;pay&quot; symbols &amp;gt; pay_api&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -i &quot;payment&quot; symbols &amp;gt; payment_api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在 pay_api 以及 payment_api 中，我们会看到类似：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;000000010275a484 t +[WXApi handleNontaxPayReq:]
0000000102757bd4 t +[WXApi handleOpenTypeWebViewWithNontaxpay:delegate:]
0000000102757d48 t +[WXApi handleOpenTypeWebViewWithPayInsurance:delegate:]
000000010275a594 t +[WXApi handlePayInsuranceReq:]
0000000102a8d780 t -[FBSDKPaymentObserver handleTransaction:]
0000000102a8d4c8 t -[FBSDKPaymentObserver init]
0000000102a8d63c t -[FBSDKPaymentObserver paymentQueue:updatedTransactions:]
0000000102a8d510 t -[FBSDKPaymentObserver startObservingTransactions]
0000000102a8d5a8 t -[FBSDKPaymentObserver stopObservingTransactions]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样的符号表，三个栏位分别表示：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;符号对应的虚拟地址&lt;/li&gt;
  &lt;li&gt;符号的类型&lt;/li&gt;
  &lt;li&gt;符号本身，可能是函数签名，也可能是变量名&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;在函数名中找到可疑的函数并移除&quot;&gt;在函数名中找到可疑的函数并移除&lt;/h4&gt;

&lt;p&gt;App Store 审核时显然不可能打回所有带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;pay&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;payment&lt;/code&gt; 关键字函数的安装包，肯定是在有把握的情况下才会将 app 打回。所以下一步就是确认哪些 API 是让审核不过的。&lt;/p&gt;

&lt;p&gt;我们检查的方式主要有两个：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;该 API 所属的 SDK 是否有第三方支付的能力。&lt;/li&gt;
  &lt;li&gt;该 API 是否是直接支持第三方支付功能的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以我们排除了一些无关的 API，例如：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;TalkingData 数据采集 API，TalkingData 只是数据采集方，API 被苹果监控的可能性较小。&lt;/li&gt;
  &lt;li&gt;Facebook 的 API，FB 本身不提供支付功能，API 被苹果监控的可能性较小。&lt;/li&gt;
  &lt;li&gt;支付宝的朋友圈 API，虽然符号中有 “Alipay”，但是朋友圈 API 必然也被集成进了许多不需要支付的 App，被 ban 的可能性也比较小。&lt;/li&gt;
  &lt;li&gt;我们自己代码中内购相关的 API，虽然符号中有 “pay” 字样，但是相信大部分内购 App 都会有，被 ban 的可能性较小。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最终我们定位到了两个可疑的 API：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;QQ 支付的 API
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000000102c8d48c t -[QQApiPayObject AppInfo]
0000000102c8d460 t -[QQApiPayObject OrderNo]
0000000102c8d3b0 t -[QQApiPayObject dealloc]
0000000102c8d330 t -[QQApiPayObject initWithOrderNo:AppInfo:]
0000000102c8d49c t -[QQApiPayObject setAppInfo:]
0000000102c8d470 t -[QQApiPayObject setOrderNo:]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;对于 QQ 支付的 API 来讲，无疑是苹果针对禁止的功能，我们的做法是从 QQ 的 SDK 下载处下了一个不带支付功能的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;微信支付 API
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;000000010275a484 t +[WXApi handleNontaxPayReq:]
0000000102757bd4 t +[WXApi handleOpenTypeWebViewWithNontaxpay:delegate:]
0000000102757d48 t +[WXApi handleOpenTypeWebViewWithPayInsurance:delegate:]
000000010275a594 t +[WXApi handlePayInsuranceReq:]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;对于微信的这几个 API 来说，从字面上看不出其主要功能是什么，所以我们下载了微信的两个 SDK 版本，一个带支付的，一个不带支付的。对比了一下发现两个版本中都有这几个符号，所以初步确认这个符号和支付功能无关，就没有对应修改。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在更换了 QQ SDK 之后，我们的 App 就过审核了。&lt;/p&gt;

&lt;h2 id=&quot;网络以及服务不连通&quot;&gt;网络以及服务不连通&lt;/h2&gt;

&lt;p&gt;在第一次提交审核的时候，我们被打回的理由是 “游戏打开之后就卡在了 Unity logo 画面”，但是本地各种机型都无法复现。在加载阶段，我们做的事情很简单：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从 HTTPDNS 获取 DNS 解析结果。&lt;/li&gt;
  &lt;li&gt;连接服务器更新最新版本信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在请美国的同学帮忙测试之后发现，错误发生在从 HTTPDNS 获取 DNS 解析结果这一步，这一步我们使用的是阿里云的 HTTPDNS 服务，但是不知为何，在国外区域请求一直发生错误。无奈之下，我们自己搭建了一个简易的 HTTPDNS 服务，解决了这个问题。&lt;/p&gt;

&lt;p&gt;如果读者遇到本地无法复现的审核问题，不妨搭个 VPN，连接到加州的网络试试看。&lt;/p&gt;

&lt;h2 id=&quot;初版兼容性&quot;&gt;初版兼容性&lt;/h2&gt;

&lt;p&gt;有一个我们吃了大亏的地方，就是第一个发布版本中，Info.plist 的 UIRequiredDeviceCapabilities 没有设置，导致后期收到了不少 App Store 的差评。&lt;/p&gt;

&lt;p&gt;UIRequiredDeviceCapabilities 的&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW3&quot;&gt;官方文档&lt;/a&gt;给出了一系列可以使用的 key 值，如果在 xcode 的 Info.plist 中包含对应的 key 值，则在 App Store 上，只有满足对应兼容性要求的手机才能下载。并且，&lt;strong&gt;在今后更新的版本中，都要支持曾经支持过的所有机型&lt;/strong&gt;。这就意味着，兼容性只能放宽，不能收紧。&lt;/p&gt;

&lt;p&gt;这会导致什么问题呢？对我们来说，第一次发布的版本中，我们只限制了 iOS 11 以上的手机可以下载，但是没有限制支持 arkit 的才能下载。所以有一些机型不支持 arkit 的下载之后，发现 AR 功能无法使用而留下了差评。后期我们发现之后也不能收紧兼容性，给维护造成了很大困扰。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/in-post/app-store-review/05-devicecompatibility.jpeg&quot;&gt;&lt;img src=&quot;/img/in-post/app-store-review/05-devicecompatibility.jpeg&quot; alt=&quot;05-devicecompatibility&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;区分审核服务器&quot;&gt;区分审核服务器&lt;/h2&gt;

&lt;p&gt;在我们的团队中，App 环境分成 3 个，dev -&amp;gt; alpha -&amp;gt; release&lt;/p&gt;

&lt;p&gt;dev 是开发团队平时用于开发，测试的服务器。
alpha 是发版本前，用于固定版本的测试环境，以及审核用的环境。
release 是线上的正式服务器。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/in-post/app-store-review/02-env.jpeg&quot;&gt;&lt;img src=&quot;/img/in-post/app-store-review/02-env.jpeg&quot; alt=&quot;02-env&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;每一个环境中，有其对应的安装包和服务器包。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;安装包即 iOS 的 ipa 包。
    &lt;ul&gt;
      &lt;li&gt;其中包括了版本号，编译时间戳，还有打包时的美术资源&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;每一个版本号对应一个环境，由版本号控制安装包对应的环境&lt;/strong&gt;。&lt;/li&gt;
      &lt;li&gt;版本号对应的环境信息储存在高可用的服务器上，这里选择的是阿里云的 OSS 服务，既保证了高可用性，也在最大限度上减少了服务器开销。如下图：&lt;a href=&quot;/img/in-post/app-store-review/03-env.jpeg&quot;&gt;&lt;img src=&quot;/img/in-post/app-store-review/03-env.jpeg&quot; alt=&quot;03-env&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;客户端在&lt;strong&gt;第一次打开时&lt;/strong&gt;，向阿里云请求该版本号对应的环境名，&lt;strong&gt;并缓存在本地&lt;/strong&gt;，下次打开时直接从本地读取。&lt;/li&gt;
      &lt;li&gt;在得到环境名后，从本地的环境 - ip 表中，获取对应的服务器 ip ，并连接对应的服务器进行交互。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;服务器则是用 docker 打包部署。
    &lt;ul&gt;
      &lt;li&gt;其中包括了服务器代码以及打 docker 时的配置表信息。&lt;/li&gt;
      &lt;li&gt;每个环境使用对应 docker tag 的 docker，例如 dev 版使用的 docker 镜像是 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_docker:dev&lt;/code&gt;，而 alpha 版使用的 docker 镜像是 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_docker:alpha&lt;/code&gt;，这样一来变更服务器版本就只需用一行代码来切换 tag 指向即可，保证了部署的代码和测试的代码是一致的。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker tag test_docker:dev test_docker:alpha&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样一来，每个环境之间就不会互相影响了，开发时：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;客户端程序可以连接 dev 版本的服务器进行开发，服务器的更新，数据变化不会影响到审核或者线上正式玩家。&lt;/li&gt;
  &lt;li&gt;当需要发版时，更改阿里云 OSS 上的文件，将客户端包里版本号对应的环境更改至 alpha，并将dev 标签的 docker 打上 alpha 标签，我们就完成了将 dev 环境复制到 alpha 环境的操作。&lt;/li&gt;
  &lt;li&gt;此时，我们可以将对应的客户端安装包提交审核，在审核期间，开发和线上活动均不会影响到审核员的数据。&lt;/li&gt;
  &lt;li&gt;等到审核通过后，我们可以再将审核服和对应安装包部署到 release 环境中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于我们在客户端有了对应的环境名，我们也可以对应作出一些审核中特有的操作，例如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alpha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;missing-infoplist-key&quot;&gt;Missing Info.plist key&lt;/h2&gt;

&lt;p&gt;我们在搭建了自动打包系统之后，每天都会打包上传最新的安装包，在某次 git commit 之后，收到了苹果发来的邮件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Missing Info.plist key- This app attempts to access privacy-sensitive data without a usage description. The app's Info.plist must contain an NSContactsUsageDescription key with a string value explaining to the user how the app uses this data.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们在 App 的使用过程中从未获取过用户的联系人信息，所以我们希望找到导致这个警告的原因，而不是添加一个不必要的 NSContactsUsageDescription。&lt;/p&gt;

&lt;p&gt;苹果会弹出这个警告，而我们没有调用联系人的 API，那么应该是间接引入了获取联系人的 API，导致 API 被苹果扫描到了。我们在 Linked Library 中找到了 Contacts.Framework 并将其删除后，重新编译。发现讯飞科技的 SDK 报错了。原来是我们使用了游密的 SDK 实现聊天功能，游密又使用了讯飞的 SDK 实现语音转文字功能，讯飞的 SDK 又引入了联系人的 API 来获取联系人名字，帮助语音识别更准确地识别人名。&lt;/p&gt;

&lt;p&gt;最后由于我们不需要讯飞的 SDK，就和游密要了不含讯飞的SDK。如果不使用这个方式，也可以自己新建一个 .m 文件，实现几个 dummy function 来规避编译错误，又不影响已有功能。&lt;/p&gt;

&lt;h1 id=&quot;经验总结&quot;&gt;经验总结&lt;/h1&gt;

&lt;p&gt;Unity 在目前的 3D 开发引擎里，算是社区很健全，同时文档也很丰富的一个引擎。我们遇到的绝大部分问题都是其他开发者踩过的坑，如果在一个方面停滞不前，没有好的解决方案时，不妨系统地静下心来通读一下文档。欲速则不达，静下心思考之后，往往能找到更优雅地捷径。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果你看到这里，一定是真爱！欢迎看看我的其他 &lt;a href=&quot;http://chendi.me/&quot;&gt;blog&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Apr 2018 08:15:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/20/app-store-review/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/20/app-store-review/</guid>
        
        <category>Tech</category>
        
        <category>AppStore</category>
        
        
      </item>
    
      <item>
        <title>Unity Asset Management</title>
        <description>&lt;h2 id=&quot;需求&quot;&gt;需求&lt;/h2&gt;

&lt;p&gt;在团队进行 Unity 开发的时候，就资源管理的方式出现过许多吐槽，比如 “为什么不直接放进 Resource 里，多方便”，“要是当初放进 Resource 里就不会出这么多 bug 了 ”。当吐槽的次数越来越多，就意味着这个问题是阻碍开发效率的因素，急需解决。&lt;/p&gt;

&lt;p&gt;同时，游戏安装包的大小与资源管理的方式直接挂钩，想要缩小安装包，就必须理解资源管理的原理并进行优化。&lt;/p&gt;

&lt;h3 id=&quot;背景常识&quot;&gt;背景常识&lt;/h3&gt;

&lt;p&gt;对于大部分 Unity 开发来说，资源管理是个必修课，但是对于我这个主修后端开发的来说，还是有一些常识需要补补的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://unity3d.com/learn/tutorials/temas/best-practices/assets-objects-and-serialization&quot;&gt;资源&lt;/a&gt;&lt;/strong&gt; 在这篇博客中特别指的是 Unity 中的资源，例如图片，纹理，材质，模型，音频文件等。在游戏进行中，绚丽的特效和精美的场景都需要将资源从手机储存中读取出来并播放。由于摩尔定律，手机的 CPU 和 GPU 都有了大幅提高 ，但是手机储存介质的存取速度却没有太多提升，这就导致了在游戏的过程中资源的管理很容易成为瓶颈。(磁盘I储存以及 IO成为瓶颈)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;目标细化&quot;&gt;目标细化&lt;/h3&gt;
&lt;p&gt;在资源管理这个话题下，我们可以将其分为一下几个需要进行权衡的问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;资源在什么时候，存在哪？&lt;/strong&gt; 存在游戏安装包中？还是存在服务器上？还是存在内存中？还是存在手机磁盘上？&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;资源是否需要压缩？&lt;/strong&gt; 用如果要压缩，什么算法压缩？什么时候进行解压缩？&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;资源是否需要缓存？缓存在什么地方？&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;资源是否需要热更新？如何支持热更新？&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;游戏安装包的大小由哪几部分组成？如何在不影响游戏安装体验的情况下，如何减小安装包&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;官方文档总结&quot;&gt;官方文档总结&lt;/h2&gt;

&lt;p&gt;Unity 官方的文档对于资源管理有丰富的文档。在阅读之后受益良多，故在此总结，望与大家交流促进。&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;对于大部分 Unity 开发者来说，最熟悉的资源储存位置便是 Resources 文件夹了，对于储存在 Resources 文件夹中的文件来说，读取只需要一句简单的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Resources.Load&lt;/code&gt; 即可，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    rend.material.mainTexture = Resources.Load(&quot;glass&quot;) as Texture;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;放在 Resources 中的好处就是方便，需要用的就放进去，用的时候直接取出来。但是在 &lt;a href=&quot;https://unity3d.com/learn/tutorials/temas/best-practices/resources-folder&quot;&gt;官方的最佳实践文档中&lt;/a&gt;，官方明确说明 &lt;code class=&quot;highlighter-rouge&quot;&gt;Don't use it&lt;/code&gt;。不推荐的原因包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将资源放于 Resources 中，在程序运行时，资源在内存的管理就不由程序员掌控。一个资源，例如图片，在使用过后是否要销毁，节省内存，还是要在内存中保留，方便后续其他界面使用？这个信息是 Unity 不能直接计算出的。&lt;/li&gt;
  &lt;li&gt;在 Resources 文件夹中放置过多资源，会增加游戏的启动时间。游戏启动的时候，Splash Screen 播放的时候，会读取并索引 Resources 文件夹中的资源，索引的本质是一个&lt;a href=&quot;https://unity3d.com/learn/tutorials/temas/best-practices/resources-folder#footnote-1&quot;&gt;树结构&lt;/a&gt;。索引的建立所花的时间复杂度是 O(N log(N))，当 Resources 文件夹中有超过 10,000 个文件时，低端机上可能需要花费好几秒钟才能完成索引建立。&lt;/li&gt;
  &lt;li&gt;如果将资源放在 Resources 文件夹中，资源会在编译时生成一个 Resources 资源包，这个资源包在编译之后是不能被修改的，也就减少了资源热更新方案中的灵活性。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;综上所述，Resources 是一个短期使用方便，但是不利于长期项目发展的方案。对于快速做一个 demo 来说，是最佳选择。在正式项目中，对于部分常用，少量，不需要经常更新的资源，也可以放于 Resources 文件夹中。&lt;/p&gt;

&lt;p&gt;特别是对于图片资源来说，有个奇怪的现象。如果图片放于 Asset Bundle 中，在储存时占用的空间是 Unity 资源序列化的大小，一个 100Kb 的 jpg 图片可能会序列化成 5M 的文件。但是在 Resources 文件夹中，只会占用 100Kb 的空间，并且在加载使用时没有太多区别。&lt;/p&gt;

&lt;h3 id=&quot;asset-bundle&quot;&gt;Asset Bundle&lt;/h3&gt;

&lt;p&gt;Asset Bundle 是 Unity &lt;a href=&quot;https://unity3d.com/learn/tutorials/topics/best-practices/assetbundle-fundamentals&quot;&gt;官方推荐的资源管理方案&lt;/a&gt;。建议大家都完整地阅读以下官方的文档，非常细致详细。&lt;/p&gt;

&lt;p&gt;在使用 Asset Bundle 的时候有3个方面是首先要了解的：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Asset Bundle 是否压缩？使用哪种压缩方案？&lt;/li&gt;
  &lt;li&gt;Asset Bundle 如何读取使用？&lt;/li&gt;
  &lt;li&gt;如何从 Asset Bundle 中读取出对应的 Unity Object?&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;asset-bundle-的压缩方式以及分发&quot;&gt;Asset Bundle 的压缩方式以及分发&lt;/h4&gt;

&lt;p&gt;Asset Bundle 在项目中往往包含了模型，动作，贴图等游戏必须的资源。在 Unity 中，对于压缩方式，我们有 3 种选择：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;压缩方式&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;提取 Object&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;压缩后大小&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;解压速度&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;不压缩&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;提取时可以单独提取某个 Object。&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无变化&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不需解压&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;LZ4&lt;/code&gt; 算法压缩&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;压缩时可以独立压缩每一个 Asset Bundle 中的 Object，并且提取时可以单独提取某个 Object。&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;压缩率与 &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; 相似&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;解压快，大部分情况下无感知&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;LZMA&lt;/code&gt; 算法压缩&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;提取时只能一次加载出整个 Asset Bundle 中的内容，不能单独提取某个 Object&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;多数情况下压缩率比 &lt;code class=&quot;highlighter-rouge&quot;&gt;LZ4&lt;/code&gt; 略佳&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;解压慢&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在&lt;a href=&quot;https://unity3d.com/learn/tutorials/topics/best-practices/assetbundle-usage-patterns&quot;&gt;压缩方式的官方文档&lt;/a&gt;中，根据不同的使用场景给出了对应的建议。对于我的项目来说，由于是 iOS 平台上的项目，包体大小是希望尽量小的，这样可以避免玩家下载的等待时间。同时，我们选择不在游戏开始时下载资源包，从而避免玩家在游戏开始时由于资源包下载导致的流逝。所以，我们最后决定使用 LZ4 压缩 Asset Bundle，并在分发时&lt;a href=&quot;https://unity3d.com/learn/tutorials/temas/best-practices/assetbundle-usage-patterns?playlist=30089#Distribution_Streaming_Assets&quot;&gt;绑定在安装包中发放&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;asset-bundle-如何读取使用&quot;&gt;Asset Bundle 如何读取使用&lt;/h4&gt;

&lt;p&gt;在&lt;a href=&quot;https://unity3d.com/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_AssetBundles&quot;&gt;官方关于AB包读取的部分&lt;/a&gt;也提供了5种不同的 API 进行 AB 包的读取。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssetBundle.LoadFromMemory&lt;/code&gt; 官方推荐不使用该 API。原因是在使用时会使用相当于资源3倍的内存占用。这个 API 底层运行是会先将资源从可执行文件的代码区读取出来，复制到一块新开辟的内存空间，所以最终会占用3块内存：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;可执行文件的代码区内存占用。&lt;/li&gt;
      &lt;li&gt;新开辟的内存空间，用以储存从代码区拷贝出来的 AB 包。&lt;/li&gt;
      &lt;li&gt;最终从 AB 中读取出来的 Unity Object&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssetBundle.LoadFromFile&lt;/code&gt; 高度优化过的用以读取未压缩或者 LZ4 压缩的 AB 包。在调用该 API 时，Unity 只会加载 AB 包的头文件，而不会读取真正的内容。主要的资源内容会在实例化 Unity Object，也就是调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;AssetBundle.Load&lt;/code&gt; 时进行读取。使用时要注意这个懒读取的机制，避免在性能需求高的时候进行第一次 Load 操作。同时，在 Unity Editor 中，这个 API 会直接读取加载整个 AB 包的内容，和手机上不同，所以在 Unity Editor 进行性能分析时会发现资源加载所占用的性能特别多。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AssetBundle.LoadFromStream&lt;/code&gt; 这个 API 没有过多介绍，应该是与 &lt;code class=&quot;highlighter-rouge&quot;&gt;AssetBundle.LoadFromFile&lt;/code&gt; 类似，但是形式上传入参数为一个数据流。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UnityWebRequest&lt;/code&gt; 中的 &lt;a href=&quot;http://docs.unity3d.com/ScriptReference/Networking.DownloadHandlerAssetBundle.html?_ga=2.267324747.47480907.1518831956-488113989.1504339953&quot;&gt;DownloadHandlerAssetBundle&lt;/a&gt; API。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;这个 API 是官方推荐的，用法也比较多样，最简单的例子可以在 &lt;a href=&quot;https://docs.unity3d.com/Manual/UnityWebRequest-DownloadingAssetBundle.html&quot;&gt;Downloading an AssetBundle from HTTP server&lt;/a&gt; 中找到。&lt;/li&gt;
      &lt;li&gt;其中有一个功能是很有用的，就是它的缓存功能。当使用带版本号的 API &lt;code class=&quot;highlighter-rouge&quot;&gt;public static Networking.UnityWebRequest GetAssetBundle(string uri, uint version, uint crc);&lt;/code&gt; 来下载时，会先检查本地是否有该版本的 AssetBundle，如果有就直接使用本地的 AB 包，如果没有就从服务器下载后放入缓存中。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;，在Unity的 AssetBundle 缓存系统里，（文件名，版本号）就标注了一个 AssetBundle，和 AB 包下载的 url 无关。所以 AB 包可以一开始放在安装包中，从安装包文件夹下载出来到缓存中，而需要更新时，从 CDN 服务器检查下载新版本即可，二者可以无缝兼容。关于缓存部分原理可以看 &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.GetAssetBundle.html&quot;&gt;UnityWebRequest 的介绍&lt;/a&gt;。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WWW.LoadFromCacheOrDownload&lt;/code&gt;。根据官方文档，从 2017.1 开始，这个 API 只是 &lt;code class=&quot;highlighter-rouge&quot;&gt;UnityWebRequest&lt;/code&gt; 的一个封装，并且将在未来 deprecated。 推荐大家尽量不使用这个 API。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;如何从-assetbundle-中读取-unity-object&quot;&gt;如何从 AssetBundle 中读取 Unity Object&lt;/h4&gt;

&lt;p&gt;从 AssetBundle 中读取 Unity Object 主要有 3 个 API：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AssetBundle.LoadAsset.html&quot;&gt;LoadAsset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AssetBundle.LoadAllAssets.html&quot;&gt;LoadAllAsset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/AssetBundle.LoadAssetWithSubAssets.html&quot;&gt;LoadAssetWithSubAssets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三个 API 的使用选择上相对比较容易判断。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当一个 AB 包中大部分(66%或者以上）的 Unity Object 都需要被加载时，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadAllAsset&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果要加载多个 Unity Object，尽量多使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadAllAsset&lt;/code&gt; API，如果需要可以将其分为多个 AB 包。&lt;/li&gt;
  &lt;li&gt;如果要加载的 Unity Object 引用了很多其他 Unity Object，例如一个角色形象，引用了 FBX 文件，动作，贴图等。此时使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadAssetWithSubAssets&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;其余的情况都使用 LoadAsset。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最终解决方案&quot;&gt;最终解决方案&lt;/h2&gt;

&lt;p&gt;在比较权衡了便捷性，用户体验，性能，资源占用等方面因素，我们最后使用了如下的一套方案。&lt;/p&gt;

&lt;h3 id=&quot;资源储存&quot;&gt;资源储存&lt;/h3&gt;

&lt;p&gt;绝大部分的资源使用 Asset Bundle 来进行序列化，主要包括模型，特效，界面 UI。少部分特殊资源储存于 Resources 文件夹中，这部分主要是加载界面，字体，小图标等资源。这样的分配可以让关键部件例如加载，文字提示等功能更加健壮，不会出现由于 AssetBundle 管理不善而出现的致命 Bug，同时也可以让后期更新模型特效资源更灵活。&lt;/p&gt;

&lt;h3 id=&quot;资源压缩和分发&quot;&gt;资源压缩和分发&lt;/h3&gt;

&lt;p&gt;最初，我们在 Asset Bundle 分发方面使用了热加载的方案，就是在游戏开始时检测资源包更新，下载最新资源包后，再解压资源包，进入游戏。这个流程的好处在于初始的包体非常小，可以减小至 100 MB 以内。但是这个流程的弊病也很严重，就是玩家需要一个 “下载资源包” 的过程，并且这个过程需要占用玩家的手机使用时间，不能在后台进行。对于成熟的游戏例如 “王者荣耀” 来说，玩家的认可度足够高，是可以接受这个时间付出的。但是对于一个新生的游戏，这个过程导致的用户流失却是我们不能承受的，所以我们选择了第二套方案。&lt;/p&gt;

&lt;p&gt;第二套方案是在安装包中附带了对应版本的 Asset Bundle 并进行了压缩，在游戏开启时，只需要进行一次十几秒的解压过程即可开始游戏。这是一个端游常用的方案，在游戏发行的初期可以帮助我们避免由于 “下载资源包” 导致的用户流失。&lt;/p&gt;

&lt;p&gt;在今后的迭代中，我们还准备做进一步的改进，融合第一套和第二套方案。第二套方案在游戏启动时，同样可以检测资源包的更新，通过资源包的哈希值以及更新时间，判断是否需要下载更新。这样对于第一次下载游戏的用户，可以避免由 “下载资源包” 导致的用户流失，而对于第二次更新游戏的用户，可以一定程度上避免全量更新。&lt;/p&gt;

&lt;h3 id=&quot;资源的使用&quot;&gt;资源的使用&lt;/h3&gt;

&lt;p&gt;在资源使用上，主要流程还是 预加载资源包 – 使用克隆资源 – 释放资源包，但是由于不同模块间可能会需要使用相同的资源，所以模块间仍然需要进行协作来优化资源的使用。这里主要有一个优化点。&lt;/p&gt;

&lt;p&gt;引用计数。在加载使用资源包的流程，其实和内存管理中 开辟内存空间 – 使用内存空间 – 释放内存空间 的流程很相似。所以我们也可以将内存管理中常用的手段拿来使用。内存管理中除了我们都熟悉的 Garbage Collection 之外，还有 iOS 中使用的 ARC (Automatic Reference Counting)，自动引用计数。当一个资源被引用使用时，我们将其的计数加一，当其被释放时，将其的计数减一，如果计数为 0，则将其释放。这样一来，我们既可以准确及时地释放资源，又可以最大程度地避免资源管理上的混乱。&lt;/p&gt;

&lt;h3 id=&quot;经验总结&quot;&gt;经验总结&lt;/h3&gt;

&lt;p&gt;Unity 在目前的 3D 开发引擎里，算是社区很健全，同时文档也很丰富的一个引擎。我们遇到的绝大部分问题都是其他开发者踩过的坑，如果在一个方面停滞不前，没有好的解决方案时，不妨系统地静下心来通读一下文档。欲速则不达，静下心思考之后，往往能找到更优雅地捷径。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果你看到这里，一定是真爱！欢迎看看我的其他 &lt;a href=&quot;http://chendi.me/&quot;&gt;blog&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 08:15:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/20/unity-asset-management/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/20/unity-asset-management/</guid>
        
        <category>Tech</category>
        
        <category>Unity</category>
        
        
      </item>
    
      <item>
        <title>Amoy</title>
        <description>&lt;p&gt;在其他城市航拍练手了这么几次之后，终于有机会给厦门拍一段视频了。&lt;/p&gt;

&lt;p&gt;其实关于厦门的航拍视频已经不少，但这次金砖会议之后，厦门又比以往更干净漂亮了。真好。&lt;/p&gt;

&lt;p&gt;不知道《航拍中国》什么时候会来厦门取景呢，期待。&lt;/p&gt;

&lt;video width=&quot;100%&quot; poster=&quot;/img/in-post/2017-Amoy/amoy-poster.jpg&quot; controls=&quot;&quot; preload=&quot;none&quot; type=&quot;video/mp4&quot;&gt;  
&lt;source src=&quot;http://video.chendi.me/videos/Amoy2017.mp4&quot; /&gt;  
&lt;/video&gt;

&lt;p&gt;音乐：&lt;/p&gt;

&lt;p&gt;“Sky Full Of Stars” written by Coldplay &amp;amp; Swedish DJ Avicii&lt;/p&gt;

&lt;p&gt;Performed by:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Jon Schmidt: Piano&lt;/li&gt;
  &lt;li&gt;Steven Sharp Nelson: Cello, cello percussion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Original Track: https://thepianoguys.com/shop/albums/uncharted-deluxe-edition/&lt;/p&gt;

&lt;p&gt;视频拍摄与剪辑：陈迪&lt;/p&gt;

&lt;p&gt;设备：DJI Mavic&lt;/p&gt;

</description>
        <pubDate>Thu, 05 Oct 2017 22:23:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/05/Amoy/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/05/Amoy/</guid>
        
        <category>DJI</category>
        
        <category>航拍</category>
        
        
      </item>
    
      <item>
        <title>Support grpc library on Unity</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;grpc 是由 google 推出的开源 rpc 框架。除了支持单向的 rpc 调用之外，同时还支持双向流通信，对于想要快速搭建一个基于长连接的应用是个不错的选择。&lt;/p&gt;

&lt;p&gt;由于 Unity 本身的特性，虽然它是使用 C# 进行编程的，但是在打包成 iOS 或者安卓的时候需要进行一次转换，将 C# 代码转译成 C++ 代码，所以我们需要进行一些额外的工作，将 grpc 的 C# 库转为支持 Unity 的版本。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;c-脚本初步测试&quot;&gt;C# 脚本初步测试&lt;/h2&gt;

&lt;p&gt;首先，我们可以直接将 &lt;a href=&quot;https://github.com/grpc/grpc/tree/master/src/csharp&quot;&gt;grpc 的官方库&lt;/a&gt; 的代码文件拷贝进工程中，并且用 &lt;a href=&quot;https://github.com/grpc/grpc/tree/master/examples/csharp/route_guide&quot;&gt;route guide example&lt;/a&gt; 来测试一下在 Unity 中 grpc 是否能用。&lt;/p&gt;

&lt;p&gt;在编译时，我们会发现它依赖于 &lt;a href=&quot;https://www.nuget.org/packages/Grpc.Core/&quot;&gt;Grpc.Core&lt;/a&gt; 库，这个库是一个基于 C 的底层库，并不是由 C# 编写的。 nuget 包生成的 c# 动态库并不能直接使用，因为 iOS 是静态编译的，所以这是我们第一个要为 Unity 处理的部分。&lt;/p&gt;

&lt;h2 id=&quot;生成-arm64-平台上可用的静态库&quot;&gt;生成 arm64 平台上可用的静态库&lt;/h2&gt;

&lt;p&gt;由于 iOS 是静态编译后生成一个可执行文件的，所以官方提供的 C# 动态库就不可用了，这时候我们需要自己编译一个静态库。 iOS 平台使用的架构是 arm 架构，由于现在基本都是64位的 iphone，所以直接用 arm64 作为目标平台即可。&lt;/p&gt;

&lt;h3 id=&quot;修改-makefile&quot;&gt;修改 Makefile&lt;/h3&gt;

&lt;p&gt;在官方提供的 grpc.core 的 Makefile 中，我们稍作修改，可以将编译出的 .a 文件调整为 arm64 架构下可用的。其中 iPhone SDK 的版本可根据自行需求进行修改。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; VALID_CONFIG_opt = 1
&lt;span class=&quot;gd&quot;&gt;-CC_opt = $(DEFAULT_CC)
-CXX_opt = $(DEFAULT_CXX)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+IOSFLAGS =  -arch arm64  -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS10.3.sdk -fembed-bitcode
+CC_opt = $(DEFAULT_CC) $(IOSFLAGS) 
+CXX_opt = $(DEFAULT_CXX) $(IOSFLAGS)
&lt;/span&gt; LD_opt = $(DEFAULT_CC)
 LDXX_opt = $(DEFAULT_CXX)
 CXXFLAGS_opt = -fno-exceptions
&lt;span class=&quot;gu&quot;&gt;@@ -339,7 +340,7 @@ HOST_LDXX ?= $(LDXX)
&lt;/span&gt; 
 CFLAGS += -std=c99 -Wsign-conversion -Wconversion $(W_SHADOW) $(W_EXTRA_SEMI)
 CXXFLAGS += -std=c++11
&lt;span class=&quot;gd&quot;&gt;-CPPFLAGS += -g -Wall -Wextra -Werror -Wno-long-long -Wno-unused-parameter -DOSATOMIC_USE_INLINED=1
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+CPPFLAGS += -g -Wall -Wextra -Wno-long-long -Wno-unused-parameter -DOSATOMIC_USE_INLINED=1
&lt;/span&gt; LDFLAGS += -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后运行&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  grpc git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1.4.x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ make
...
...
➜  grpc git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1.4.x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; ./libs/opt/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.a
./libs/opt/libares.a                ./libs/opt/libgrpc_cronet.a
./libs/opt/libboringssl.a           ./libs/opt/libgrpc_plugin_support.a
./libs/opt/libgpr.a                 ./libs/opt/libgrpc_unsecure.a
./libs/opt/libgrpc.a                ./libs/opt/libz.a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时我们就有了 runtime 所需的静态库，我们将 &lt;code class=&quot;highlighter-rouge&quot;&gt;libgrpc.a&lt;/code&gt; 复制到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Plugins/iOS&lt;/code&gt; 文件夹中，这样在导出 xcode 工程时就会自动加入 xcode 项目 link line 中。&lt;/p&gt;

&lt;h3 id=&quot;获取-c-客户端所需的静态库&quot;&gt;获取 C# 客户端所需的静态库&lt;/h3&gt;

&lt;p&gt;除了 grpc.core 的静态库之外，我们还需要一个 csharp 的特制静态库，可以通过以下命令获得：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  grpc git:(v1.4.x) ✗ gcc -arch arm64  -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS10.3.sdk -I. -I./include -c -o grpc_csharp_ext.o src/csharp/ext/grpc_csharp_ext.c
➜  grpc git:(v1.4.x) ✗ ar -rsc grpc_csharp_ext.a grpc_csharp_ext.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再将 grpc_csharp_ext.a 复制到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Plugins/iOS&lt;/code&gt; 文件夹中。&lt;/p&gt;

&lt;h2 id=&quot;修改-grpccore-代码中的动态库加载&quot;&gt;修改 Grpc.Core 代码中的动态库加载&lt;/h2&gt;

&lt;p&gt;为了应对 Grpc.Core 实现中使用的动态库加载，与 iOS 静态编译的做法冲突的情况，我们需要修改一下文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;    modified:   src/csharp/Grpc.Core/Internal/DefaultSslRootsOverride.cs
    modified:   src/csharp/Grpc.Core/Internal/NativeExtension.cs
    modified:   src/csharp/Grpc.Core/Internal/NativeLogRedirector.cs
    modified:   src/csharp/Grpc.Core/Internal/NativeMethods.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面我们一个一个来看。&lt;/p&gt;

&lt;h3 id=&quot;defaultsslrootsoverridecs&quot;&gt;DefaultSslRootsOverride.cs&lt;/h3&gt;

&lt;p&gt;首先是 &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultSslRootsOverride.cs&lt;/code&gt; 文件中，加载了预存在本地的证书文件，应该是用来做 certificate pinning 的吧。这部分可以暂时去掉，等需要用到这部分功能时再加入。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/csharp/Grpc.Core/Internal/DefaultSslRootsOverride.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/csharp/Grpc.Core/Internal/DefaultSslRootsOverride.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -56,6 +56,7 @@ namespace Grpc.Core.Internal
&lt;/span&gt;         {
             lock (staticLock)
             {
&lt;span class=&quot;gi&quot;&gt;+                               /*
&lt;/span&gt;                 var stream = typeof(DefaultSslRootsOverride).GetTypeInfo().Assembly.GetManifestResourceStream(RootsPemResourceName);
                 if (stream == null)
                 {
&lt;span class=&quot;gu&quot;&gt;@@ -66,6 +67,7 @@ namespace Grpc.Core.Internal
&lt;/span&gt;                     var pemRootCerts = streamReader.ReadToEnd();
                     native.grpcsharp_override_default_ssl_roots(pemRootCerts);
                 }
&lt;span class=&quot;gi&quot;&gt;+                */
&lt;/span&gt;             }
         }
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nativeextensioncs&quot;&gt;NativeExtension.cs&lt;/h3&gt;

&lt;p&gt;在这里我们需要修改动态库加载的函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;Load()&lt;/code&gt;，要做两部分考虑：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在 iOS 平台上，不需要加载动态库，可以直接跳过这个函数的逻辑，使用 Unity Macro 来实现:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/csharp/Grpc.Core/Internal/NativeExtension.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/csharp/Grpc.Core/Internal/NativeExtension.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -93,7 +93,10 @@ namespace Grpc.Core.Internal
&lt;/span&gt;         /// Detects which configuration of native extension to load and load it.
         /// &amp;lt;/summary&amp;gt;
         private static UnmanagedLibrary Load()
&lt;span class=&quot;gd&quot;&gt;-        {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+               {
+                       #if UNITY_IOS
+                               return null;
+                       #endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在 PC 或者 MAC 上，仍然要加载动态库并且运行，否则就无法在 PC 或者 Mac 上调试游戏了，所以我们需要修改一下寻找插件的路径：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -111,8 +114,10 @@ namespace Grpc.Core.Internal
&lt;/span&gt;             var netCorePublishedAppStylePath = Path.Combine(assemblyDirectory, runtimesDirectory, GetNativeLibraryFilename());
             var netCoreAppStylePath = Path.Combine(assemblyDirectory, &quot;../..&quot;, runtimesDirectory, GetNativeLibraryFilename());
 
&lt;span class=&quot;gi&quot;&gt;+                       var unityPath = Path.Combine (assemblyDirectory, &quot;../../Assets/Plugins/GrpcLib&quot;, runtimesDirectory, GetNativeLibraryFilename ());
+
&lt;/span&gt;             // Look for all native library in all possible locations in given order.
&lt;span class=&quot;gd&quot;&gt;-            string[] paths = new[] { classicPath, netCorePublishedAppStylePath, netCoreAppStylePath};
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                       string[] paths = new[] { classicPath, netCorePublishedAppStylePath, netCoreAppStylePath, unityPath};
&lt;/span&gt;             return new UnmanagedLibrary(paths);
         }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nativelogredirectorcs&quot;&gt;NativeLogRedirector.cs&lt;/h3&gt;

&lt;p&gt;在 C 代码回调 C# 代码时，由于 IL2CPP 会对函数名进行 &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_72/rzarg/name_mangling.htm&quot;&gt;name mangling&lt;/a&gt;，所以会找不到函数，所以需要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;MonoPInvokeCallback&lt;/code&gt; 进行修饰，避免因为名称改变而无法调用：&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/csharp/Grpc.Core/Internal/NativeLogRedirector.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/csharp/Grpc.Core/Internal/NativeLogRedirector.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -66,6 +66,7 @@ namespace Grpc.Core.Internal
&lt;/span&gt;             }
         }
 
&lt;span class=&quot;gi&quot;&gt;+        [AOT.MonoPInvokeCallback(typeof(GprLogDelegate))]
&lt;/span&gt;         private static void HandleWrite(IntPtr fileStringPtr, int line, ulong threadId, IntPtr severityStringPtr, IntPtr msgPtr)
         {

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外可以修改一下输出到 Console 时调用的函数：&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -97,7 +98,11 @@ namespace Grpc.Core.Internal
&lt;/span&gt;             }
             catch (Exception e)
             {
&lt;span class=&quot;gd&quot;&gt;-                Console.WriteLine(&quot;Caught exception in native callback &quot; + e);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+#if UNITY_METRO
+                               UnityEngine.Debug.Log(&quot;Caught exception in native callback &quot; + e);
+#else
+                               Console.WriteLine(&quot;Caught exception in native callback &quot; + e);
+#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nativemethodscs&quot;&gt;NativeMethods.cs&lt;/h3&gt;

&lt;p&gt;在这里，grpc 调用了 Grpc.Core 中的 C 代码。在 Unity 中，需要使用 &lt;a href=&quot;https://docs.unity3d.com/Manual/PluginsForIOS.html&quot;&gt;Unity 官方要求的方式&lt;/a&gt;，定义原生函数的原型，并且在初始化时，设置进去。&lt;/p&gt;

&lt;p&gt;由于 iOS 上用的是静态编译，所以当平台为 iOS 时，pluginName 设为 “__Internal”&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/csharp/Grpc.Core/Internal/NativeMethods.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/csharp/Grpc.Core/Internal/NativeMethods.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -51,6 +51,14 @@ namespace Grpc.Core.Internal
&lt;/span&gt;     /// &amp;lt;/summary&amp;gt;
     internal class NativeMethods
     {
&lt;span class=&quot;gi&quot;&gt;+#if UNITY_EDITOR               
+               private const string pluginName = &quot;grpc_csharp_ext&quot;;            
+#elif UNITY_IOS || UNITY_TVOS || UNITY_WEBGL           
+               public const string pluginName = &quot;__Internal&quot;;          
+#else          
+               public const string pluginName = &quot;grpc_csharp_ext&quot;;             
+#endif
+
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定义 C API&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gi&quot;&gt;+               static class NativeCalls
+               {
+                       [DllImport(pluginName)]
+                       internal static extern void grpcsharp_init();
+
+                       [DllImport(pluginName)]
+                       internal static extern void grpcsharp_shutdown();
&lt;/span&gt;...
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改初始化方式&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         public NativeMethods(UnmanagedLibrary library)
         {
&lt;span class=&quot;gi&quot;&gt;+               #if UNITY_IOS
+                       this.grpcsharp_init = NativeCalls.grpcsharp_init;
+                       this.grpcsharp_shutdown = NativeCalls.grpcsharp_shutdown;
+                       this.grpcsharp_version_string = NativeCalls.grpcsharp_version_string;
&lt;/span&gt;...
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这部分代码 diff 省略了许多函数，基本上所有 Grpc.Core 中的函数都需要和 &lt;code class=&quot;highlighter-rouge&quot;&gt;grpcsharp_init&lt;/code&gt; 一样的处理，由于篇幅限制，就不把所有函数都的 diff 都放上来了。&lt;/p&gt;

&lt;h3 id=&quot;调试打包&quot;&gt;调试打包&lt;/h3&gt;

&lt;p&gt;在最后，我们在真机和 Unity Editor 中测试了一下，所有类型的 grpc 请求都可以正常进行。唯一有些意外的就是，在资源释放时，记得要调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;channel.Dispose()&lt;/code&gt;，如果不调用的话，进程就会卡死。这个原因目前没有去仔细研究过，官方 demo 中似乎也没有。&lt;/p&gt;

&lt;h3 id=&quot;经验总结&quot;&gt;经验总结&lt;/h3&gt;

&lt;p&gt;这个问题其实相对也是比较棘手的，查了许多资料，也参考了一下日本游戏界前辈的做法 &lt;a href=&quot;https://github.com/neuecc/MagicOnion&quot;&gt;Magic Onion Project&lt;/a&gt;。不过在解决的时候没有马上把博客写出来，所以现在总结起来也没有太多感想了。&lt;/p&gt;

&lt;p&gt;以后就算是忙，也还是要及时总结才行。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果你看到这里，一定是真爱！欢迎看看我的其他 &lt;a href=&quot;http://chendi.me/&quot;&gt;blog&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Jul 2017 08:15:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/30/unity-grpc-plugin-zh/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/30/unity-grpc-plugin-zh/</guid>
        
        <category>Tech</category>
        
        <category>Unity</category>
        
        <category>grpc</category>
        
        
      </item>
    
      <item>
        <title>Support grpc library on Unity</title>
        <description>&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;Grpc is an open-sourced rpc framework developed by google。It support both unary remote procedual call and bi-directional streaming. For those who wants to build a client-server bi-directional persistent connection, it’s a simple and modern solution.&lt;/p&gt;

&lt;p&gt;Grpc itself support multiple language and multiple platform, but Unity is not one of them for now.&lt;/p&gt;

&lt;p&gt;Even though we develop most of the Unity project in C#, the Unity runtime is not running C# script directly. On Unity iOS platform specifically, it will use L2CPP (An ahead-of-time compiler) to translate c# script into c++ code, then finally compile and run on iOS devices. For us, if we want to use grpc in Unity project, we have some additional work to do.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;testing-grpc-c-library&quot;&gt;Testing grpc C# library&lt;/h2&gt;

&lt;p&gt;First of all, we can directly copy the &lt;a href=&quot;https://github.com/grpc/grpc/tree/master/src/csharp&quot;&gt;grpc c# source code&lt;/a&gt; into Unity project and use &lt;a href=&quot;https://github.com/grpc/grpc/tree/master/examples/csharp/route_guide&quot;&gt;route guide example&lt;/a&gt; to test the basic feature of grpc.&lt;/p&gt;

&lt;p&gt;During compilation, we will find the C# grpc library is depend on &lt;a href=&quot;https://www.nuget.org/packages/Grpc.Core/&quot;&gt;Grpc.Core&lt;/a&gt; Library. &lt;em&gt;Grpc.Core&lt;/em&gt; is a C library and official C# grpc library compile &lt;em&gt;Grpc.Core&lt;/em&gt; into a shared library. Since iOS application can only depend on static library, we have to static compile the &lt;em&gt;Grpc.Core&lt;/em&gt; library and use it in iOS devices.&lt;/p&gt;

&lt;p&gt;Why don’t we just copy the C code into the xcode project and use xcode to pull it in? In the core library, there are bunch of relative include like &lt;em&gt;#include “src/core/…“&lt;/em&gt;, which is not easy to work around in xcode project.&lt;/p&gt;

&lt;h2 id=&quot;generate-static-library-for-arm64-platform&quot;&gt;Generate static library for arm64 platform&lt;/h2&gt;

&lt;p&gt;During this blog, we are focusing on iOS arm64 platform as an example, for other platform this might be apply.&lt;/p&gt;

&lt;p&gt;Since iOS need an static linked library instead of dynamicly load shared library, we can’t simply use the packge from &lt;em&gt;nuget.org&lt;/em&gt;. If we are simply supporting iOS arm64 architecture, we can just set the build target to arm64 and compile it on a arm64 machine (eg. Mac OS X)&lt;/p&gt;

&lt;p&gt;If we want to support all architecture, then we will need to cross-compile a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fat_binary&quot;&gt;fat binary&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;change-makefile&quot;&gt;Change Makefile&lt;/h3&gt;

&lt;p&gt;We can make some changes to the official Makefile for grpc.core, then the binary will be able to use in iOS build. There are two things we need to change.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add -isysroot config. This decides which version of iOS we can support, using a lower level of OS can make it more compatible.&lt;/li&gt;
  &lt;li&gt;Add -arch arm64 to make sure it build for arm64&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; VALID_CONFIG_opt = 1
&lt;span class=&quot;gd&quot;&gt;- CC_opt = $(DEFAULT_CC)
- CXX_opt = $(DEFAULT_CXX)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ IOSFLAGS =  -arch arm64  -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS10.3.sdk -fembed-bitcode
+ CC_opt = $(DEFAULT_CC) $(IOSFLAGS) 
+ CXX_opt = $(DEFAULT_CXX) $(IOSFLAGS)
&lt;/span&gt; LD_opt = $(DEFAULT_CC)
 LDXX_opt = $(DEFAULT_CXX)
 CXXFLAGS_opt = -fno-exceptions
&lt;span class=&quot;gu&quot;&gt;@@ -339,7 +340,7 @@ HOST_LDXX ?= $(LDXX)
&lt;/span&gt; 
 CFLAGS += -std=c99 -Wsign-conversion -Wconversion $(W_SHADOW) $(W_EXTRA_SEMI)
 CXXFLAGS += -std=c++11
&lt;span class=&quot;gd&quot;&gt;- CPPFLAGS += -g -Wall -Wextra -Werror -Wno-long-long -Wno-unused-parameter -DOSATOMIC_USE_INLINED=1
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ CPPFLAGS += -g -Wall -Wextra -Wno-long-long -Wno-unused-parameter -DOSATOMIC_USE_INLINED=1
&lt;/span&gt; LDFLAGS += -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  grpc git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1.4.x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ make
...
...
➜  grpc git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1.4.x&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; ./libs/opt/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.a
./libs/opt/libares.a                ./libs/opt/libgrpc_cronet.a
./libs/opt/libboringssl.a           ./libs/opt/libgrpc_plugin_support.a
./libs/opt/libgpr.a                 ./libs/opt/libgrpc_unsecure.a
./libs/opt/libgrpc.a                ./libs/opt/libz.a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have the library we need to grpc runtime. We can copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;libgrpc.a&lt;/code&gt; to Unity project &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Plugins/iOS&lt;/code&gt; directory. Unity will ensure this library is added to the link line of the xcode project.&lt;/p&gt;

&lt;h3 id=&quot;build-grpc-c-extension-library&quot;&gt;build grpc c# extension library&lt;/h3&gt;

&lt;p&gt;Besides the grpc.core static library, we also need a csharp specific library, we can get the library by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  grpc git:(v1.4.x) ✗ clang -arch arm64  -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS10.3.sdk -I. -I./include -c -o grpc_csharp_ext.o src/csharp/ext/grpc_csharp_ext.c
➜  grpc git:(v1.4.x) ✗ ar -rsc grpc_csharp_ext.a grpc_csharp_ext.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we will copy &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc_csharp_ext.a&lt;/code&gt; into Unity project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets/Plugins/iOS&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some thing to note:&lt;/strong&gt; If you want to support &lt;a href=&quot;https://docs.unity3d.com/Manual/AppThinning.html&quot;&gt;App thining&lt;/a&gt; feature, which will require a bitcode support of all dependent library. In order to generate a bitcode enabled library, we need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use clang as our compiler.&lt;/li&gt;
  &lt;li&gt;Add option &lt;code class=&quot;highlighter-rouge&quot;&gt;-fembed-bitcode&lt;/code&gt; to the compilation flags.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;change-grpccore-code-to-use-static-link&quot;&gt;Change Grpc.Core code to use static link&lt;/h2&gt;

&lt;p&gt;Since we are using static link instead of dynmaic load, we need to change the source code of Grpc.Core. Here are some related code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;    modified:   src/csharp/Grpc.Core/Internal/DefaultSslRootsOverride.cs
    modified:   src/csharp/Grpc.Core/Internal/NativeExtension.cs
    modified:   src/csharp/Grpc.Core/Internal/NativeLogRedirector.cs
    modified:   src/csharp/Grpc.Core/Internal/NativeMethods.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s take a look at each file&lt;/p&gt;

&lt;h3 id=&quot;defaultsslrootsoverridecs&quot;&gt;DefaultSslRootsOverride.cs&lt;/h3&gt;

&lt;p&gt;First of all, in &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultSslRootsOverride.cs&lt;/code&gt;，grpc loaded the local certificate file, I guess it’s used for certificate pinning. We can remove this part, if you need it, just change it to the certificate you need.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/csharp/Grpc.Core/Internal/DefaultSslRootsOverride.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/csharp/Grpc.Core/Internal/DefaultSslRootsOverride.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -56,6 +56,7 @@ namespace Grpc.Core.Internal
&lt;/span&gt;         {
             lock (staticLock)
             {
&lt;span class=&quot;gi&quot;&gt;+                               /*
&lt;/span&gt;                 var stream = typeof(DefaultSslRootsOverride).GetTypeInfo().Assembly.GetManifestResourceStream(RootsPemResourceName);
                 if (stream == null)
                 {
&lt;span class=&quot;gu&quot;&gt;@@ -66,6 +67,7 @@ namespace Grpc.Core.Internal
&lt;/span&gt;                     var pemRootCerts = streamReader.ReadToEnd();
                     native.grpcsharp_override_default_ssl_roots(pemRootCerts);
                 }
&lt;span class=&quot;gi&quot;&gt;+                */
&lt;/span&gt;             }
         }
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nativeextensioncs&quot;&gt;NativeExtension.cs&lt;/h3&gt;

&lt;p&gt;In the function &lt;code class=&quot;highlighter-rouge&quot;&gt;Load()&lt;/code&gt;, we need need to make two changes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On iOS platform, we don’t need to load dynamic library, but on Unity Editor, we still need to load dynamic library, let’s use a simple Unity Macro to differentiate them:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/csharp/Grpc.Core/Internal/NativeExtension.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/csharp/Grpc.Core/Internal/NativeExtension.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -93,7 +93,10 @@ namespace Grpc.Core.Internal
&lt;/span&gt;         /// Detects which configuration of native extension to load and load it.
         /// &amp;lt;/summary&amp;gt;
         private static UnmanagedLibrary Load()
&lt;span class=&quot;gd&quot;&gt;-        {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+               {
+                       #if UNITY_IOS
+                               return null;
+                       #endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;On PC or MAC, we need to load dynamic library, but the path should be modified:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -111,8 +114,10 @@ namespace Grpc.Core.Internal
&lt;/span&gt;             var netCorePublishedAppStylePath = Path.Combine(assemblyDirectory, runtimesDirectory, GetNativeLibraryFilename());
             var netCoreAppStylePath = Path.Combine(assemblyDirectory, &quot;../..&quot;, runtimesDirectory, GetNativeLibraryFilename());
 
&lt;span class=&quot;gi&quot;&gt;+                       var unityPath = Path.Combine (assemblyDirectory, &quot;../../Assets/Plugins/GrpcLib&quot;, runtimesDirectory, GetNativeLibraryFilename ());
+
&lt;/span&gt;             // Look for all native library in all possible locations in given order.
&lt;span class=&quot;gd&quot;&gt;-            string[] paths = new[] { classicPath, netCorePublishedAppStylePath, netCoreAppStylePath};
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+                       string[] paths = new[] { classicPath, netCorePublishedAppStylePath, netCoreAppStylePath, unityPath};
&lt;/span&gt;             return new UnmanagedLibrary(paths);
         }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nativelogredirectorcs&quot;&gt;NativeLogRedirector.cs&lt;/h3&gt;

&lt;p&gt;When C code in Grpc.Core calls C# code, it was not able to find the correct reference. This is because during IL2CPP compilation, a &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_72/rzarg/name_mangling.htm&quot;&gt;name mangling&lt;/a&gt; process happened, the name of the function is wrapped by namespace and class name. We can attonate the function name by &lt;code class=&quot;highlighter-rouge&quot;&gt;MonoPInvokeCallback&lt;/code&gt;, which will help Untiy IL2CPP to understand which method might get called from C code.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/csharp/Grpc.Core/Internal/NativeLogRedirector.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/csharp/Grpc.Core/Internal/NativeLogRedirector.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -66,6 +66,7 @@ namespace Grpc.Core.Internal
&lt;/span&gt;             }
         }
 
&lt;span class=&quot;gi&quot;&gt;+        [AOT.MonoPInvokeCallback(typeof(GprLogDelegate))]
&lt;/span&gt;         private static void HandleWrite(IntPtr fileStringPtr, int line, ulong threadId, IntPtr severityStringPtr, IntPtr msgPtr)
         {

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can also change the log function to Unity Debug Log：&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -97,7 +98,11 @@ namespace Grpc.Core.Internal
&lt;/span&gt;             }
             catch (Exception e)
             {
&lt;span class=&quot;gd&quot;&gt;-                Console.WriteLine(&quot;Caught exception in native callback &quot; + e);
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+#if UNITY_METRO
+                               UnityEngine.Debug.Log(&quot;Caught exception in native callback &quot; + e);
+#else
+                               Console.WriteLine(&quot;Caught exception in native callback &quot; + e);
+#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nativemethodscs&quot;&gt;NativeMethods.cs&lt;/h3&gt;

&lt;p&gt;In this file, grpc invoked the c code in &lt;code class=&quot;highlighter-rouge&quot;&gt;Grpc.Core&lt;/code&gt; library. In Unity, if we want to call into native code or invoke method in assembly, we need to &lt;a href=&quot;https://docs.unity3d.com/Manual/PluginsForIOS.html&quot;&gt;define the assembly source&lt;/a&gt;. And we also need to define each native call and add &lt;code class=&quot;highlighter-rouge&quot;&gt;Dllimport()&lt;/code&gt; decorator to each method that need to be called.&lt;/p&gt;

&lt;p&gt;Since iOS is using static compiling, so we use “__Internal” for iOS platform.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/csharp/Grpc.Core/Internal/NativeMethods.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/csharp/Grpc.Core/Internal/NativeMethods.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -51,6 +51,14 @@ namespace Grpc.Core.Internal
&lt;/span&gt;     /// &amp;lt;/summary&amp;gt;
     internal class NativeMethods
     {
&lt;span class=&quot;gi&quot;&gt;+#if UNITY_EDITOR               
+               private const string pluginName = &quot;grpc_csharp_ext&quot;;            
+#elif UNITY_IOS || UNITY_TVOS || UNITY_WEBGL           
+               public const string pluginName = &quot;__Internal&quot;;          
+#else          
+               public const string pluginName = &quot;grpc_csharp_ext&quot;;             
+#endif
+
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Define each method that needs to be called and add &lt;code class=&quot;highlighter-rouge&quot;&gt;Dllimport&lt;/code&gt; decorator.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gi&quot;&gt;+               static class NativeCalls
+               {
+                       [DllImport(pluginName)]
+                       internal static extern void grpcsharp_init();
+
+                       [DllImport(pluginName)]
+                       internal static extern void grpcsharp_shutdown();
&lt;/span&gt;...
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change the way we initialize the method.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         public NativeMethods(UnmanagedLibrary library)
         {
&lt;span class=&quot;gi&quot;&gt;+               #if UNITY_IOS
+                       this.grpcsharp_init = NativeCalls.grpcsharp_init;
+                       this.grpcsharp_shutdown = NativeCalls.grpcsharp_shutdown;
+                       this.grpcsharp_version_string = NativeCalls.grpcsharp_version_string;
&lt;/span&gt;...
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We simplfied the process of this change. This is mostly copy-pasting work. Almost all the method in this file need to make above three changes we made to&lt;code class=&quot;highlighter-rouge&quot;&gt;grpcsharp_init&lt;/code&gt;. To simply this blog, I didn’t copy the full diff here.&lt;/p&gt;

&lt;h3 id=&quot;compile-and-test&quot;&gt;Compile and test&lt;/h3&gt;

&lt;p&gt;Finally, I use the &lt;a href=&quot;https://github.com/grpc/grpc/tree/master/examples/csharp/route_guide&quot;&gt;route guide example&lt;/a&gt; to test the basic feature of grpc, like unary call, bi-directional streaming. They all works fine.&lt;/p&gt;

&lt;p&gt;The only thing that seems weird to me is during clean up. After we close the connection to server, we will need to call &lt;code class=&quot;highlighter-rouge&quot;&gt;channel.Dispose()&lt;/code&gt; to release the resource of grpc connection, otherwise, Unity will hang and seems waiting for the thread to exit. I’m not sure about the root cause of this problem, official demo didn’t call &lt;code class=&quot;highlighter-rouge&quot;&gt;Dispose&lt;/code&gt; explicitly.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is a relative tedious work to make grpc work on Unity. I did quite a lot of research, the only project I found is &lt;a href=&quot;https://github.com/neuecc/MagicOnion&quot;&gt;Magic Onion Project&lt;/a&gt;. This project makes a lot of Unity specific change to make grpc work on it. Since Unity was not supporting .Net 4.6 (now they do), even the async mechanism needs a special implementation. Now, Unity provide a beta release of .Net 4.6 support, I believe this will become the mainstream support, so I just focus on making grpc work on .Net 4.6.&lt;/p&gt;

&lt;p&gt;Even we make it work on iOS, it will still take tremendous effout to make it work on Android, Windows, Xbox and etc.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you like my blog, please checkout &lt;a href=&quot;http://chendi.me/&quot;&gt;other posts&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Jul 2017 08:15:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/30/unity-grpc-plugin-en/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/30/unity-grpc-plugin-en/</guid>
        
        <category>Tech</category>
        
        <category>Unity</category>
        
        <category>grpc</category>
        
        
      </item>
    
      <item>
        <title>Support OpenGL ES 2 on Unity ARKit Plugin</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Visualization is daydreaming with a purpose.”&lt;/p&gt;

  &lt;p&gt;– Bo Bennett&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在 2017 年的 WWDC 苹果开发者大会上，苹果发布了自己的 AR 解决方案 – ARKit。它结合了 iOS 设备自身传感器以及单目 SLAM 算法，在空间定位的能力上几乎可以与 Hololens 这样的外设相媲美了。&lt;/p&gt;

&lt;p&gt;在第一时间，Unity 也发布了 ARKit 的插件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.unity3d.com/threads/arkit-support-for-ios-via-unity-arkit-plugin.474385/&quot;&gt;论坛讨论区&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/Unity-Technologies/unity-arkit-plugin/&quot;&gt;官方 Bitbucket 代码库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.assetstore.unity3d.com/en/#!/content/92515&quot;&gt;Unity商店（相对代码库更新较慢）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;unity-脚本初步测试&quot;&gt;Unity 脚本初步测试&lt;/h2&gt;

&lt;h3 id=&quot;强大的空间定位能力&quot;&gt;强大的空间定位能力&lt;/h3&gt;

&lt;p&gt;在测试使用了 Vuforia 和 Kudan 的 AR SDK 之后，苹果的 ARKit 确确实实是把 AR 体验提升了一个等级。Vuforia 的绝大部分定位能力来源于图像的特征点识别，而并没有过多的空间定位 处理能力。而 Kudan 的 AR SDK 并不依赖于图像的预处理，更多的是依赖于实时图像分析，追踪。这两个 SDK 是在 ARKit 发布之前我们能找到效果最好的 AR SDK，但是都不理想。&lt;/p&gt;

&lt;p&gt;而苹果的 ARKit 则是结合了 iOS 设备自身传感器以及单目 SLAM 算法，在不依赖于提前环境建模的基础上，有着非常优秀的空间定位能力。除了在非常光滑平整的平面上，定位能力稍显不足，绝大部分室内室外场景的定位都是非常精确的。&lt;/p&gt;

&lt;h3 id=&quot;unity-插件原理&quot;&gt;Unity 插件原理&lt;/h3&gt;

&lt;p&gt;在使用 Unity 插件之前，先学习了一下 ARKit 和 Unity 结合的方案。大概总结如下。&lt;/p&gt;

&lt;h4 id=&quot;arkit-提供自定义渲染机制&quot;&gt;ARKit 提供自定义渲染机制&lt;/h4&gt;

&lt;p&gt;在 ARKit 追踪开始之后，摄像头的图像并不是可以自动显示到屏幕上的，特别是与第三方游戏引擎 Unity 结合的情况下。Unity 自身的渲染机制决定了：所有渲染到屏幕上的东西，都需要经过 Unity 引擎的处理。摄像头捕捉到的图像也是一样。&lt;/p&gt;

&lt;p&gt;如果不使用 ARKit 的话，Unity 显示摄像头的图像可以用 &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/WebCamTexture.html&quot;&gt;WebCamTexture API&lt;/a&gt; 来实现，Unity 已经封装好了获取摄像头并显示的逻辑。但是在使用 ARKit 之后，这个方案就不适用了。因为在开启 ARKit 之后，ARKit 需要访问摄像头获取图片，给 SLAM 算法提供分析用的数据。此时如果尝试获取摄像头的图片便会失败。&lt;/p&gt;

&lt;p&gt;于是在官方的 ARKit 文档中，它提供了自定义渲染摄像头图片的方法: &lt;a href=&quot;https://developer.apple.com/documentation/arkit/displaying_an_ar_experience_with_metal&quot;&gt;ARKit 文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/in-post/unity-arkit-plugin-opengl/arkit-custom-rendering.png&quot;&gt;&lt;img src=&quot;/img/in-post/unity-arkit-plugin-opengl/arkit-custom-rendering.png&quot; alt=&quot;官方示意图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在 ARKit 的 ARSession 中，用户可以获取到 ARFrame，在这个 ARFrame 中，我们可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;capturedImage&lt;/code&gt; 属性获取到像素点的缓存区。这个缓存区中以 YUV 的格式保存了图片的信息。官方的教程使用了 Metal 作为 GPU 渲染 API 来分别提取 Y 纹理和 UV 纹理：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateCapturedImageTextures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create two textures (Y and CbCr) from the provided frame's captured image&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pixelBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capturedImage&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CVPixelBufferGetPlaneCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;capturedImageTextureY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fromPixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pixelFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r8Unorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;planeIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;capturedImageTextureCbCr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fromPixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pixelFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rg8Unorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;planeIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromPixelBuffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CVPixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pixelFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTLPixelFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;planeIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTLTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mtlTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTLTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CVPixelBufferGetWidthOfPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planeIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CVPixelBufferGetHeightOfPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planeIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CVMetalTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CVMetalTextureCacheCreateTextureFromImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capturedImageTextureCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixelFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planeIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCVReturnSuccess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mtlTexture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CVMetalTextureGetTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtlTexture&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这部分的代码也被 Unity 的 ARKit 插件用来获取 YUV 纹理了。&lt;/p&gt;

&lt;p&gt;在获取到 YUV 纹理之后，官方建议使用 shader 将 YUV 纹理转换成 RGB 图片进行渲染，这样只需要获取 YUV 纹理的指针，而不需要在内存中进行保存，或者使用 CPU 进行计算。&lt;/p&gt;

&lt;h4 id=&quot;unity-原生纹理-api&quot;&gt;Unity 原生纹理 API&lt;/h4&gt;

&lt;p&gt;在 Unity 的 ARKit 插件中，它用到了 &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Texture2D.CreateExternalTexture.html&quot;&gt;Texture2D.CreateExternalTexture&lt;/a&gt; 将 iOS 原生的纹理转换成 Unity C# 代码中的纹理。这样一来，我们就可以将这个纹理使用到 Unity 的 shader 或者其他 3D 运算中。&lt;/p&gt;

&lt;p&gt;从官方的 API 定义上来看：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Native texture object on Direct3D-like devices is a pointer to the base type, 
from which a texture can be created (IDirect3DBaseTexture9 on D3D9, 
ID3D11ShaderResourceView on D3D11). On OpenGL/OpenGL ES it is GLuint. On Metal 
it is id&amp;lt;MTLTexture&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;id&lt;MTLTexture&gt; 是 Objective-C 中指向 MTLTexture object 的指针，而 GLuint 是 OpenGL 的对象句柄，所以说这个 API 本身仅仅是复制了对应渲染引擎的指针，在性能上也并没有多少开销。&lt;/MTLTexture&gt;&lt;/p&gt;

&lt;h4 id=&quot;unity-渲染-shader&quot;&gt;Unity 渲染 shader&lt;/h4&gt;

&lt;p&gt;在利用 &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Texture2D.CreateExternalTexture.html&quot;&gt;Texture2D.CreateExternalTexture&lt;/a&gt; 获取到了原生纹理的指针之后，Unity 写了一个 YUV 转 RGB 的 shader，这个 shader 包括 3 个部分：&lt;/p&gt;

&lt;h5 id=&quot;顶点比例放大缩小&quot;&gt;顶点比例放大/缩小&lt;/h5&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;n&quot;&gt;TexCoordInOut&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TexCoordInOut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnityObjectToClipPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_isPortrait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_texCoordScale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_texCoordScale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_TextureRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在转换 texcoord 的时候，由于 Metal 渲染 API 获取到的纹理中心点是在 (0,0)，也就是说纹理是在如下图的坐标系中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/unity-arkit-plugin-opengl/metal-coordinates-1.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以缩放时，需要先将坐标系平移 0.5f 然后乘以缩放值，再移回 (0,0) 点。这个部分我没有找到相应的文档，如果有大神对 Metal 的坐标系体系比较了解的，烦请指教。&lt;/p&gt;

&lt;h5 id=&quot;定点旋转&quot;&gt;定点旋转&lt;/h5&gt;

&lt;p&gt;在上面的代码中&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_TextureRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这句代码使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;_TextureRotation&lt;/code&gt; 进行了一次图片的旋转，这是因为 ARKit 的相机角度和真实视角并不相匹配。旋转后的图片在如下图的坐标系中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/unity-arkit-plugin-opengl/metal-coordinates-2.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;yuv-纹理转-rgb-纹理&quot;&gt;YUV 纹理转 RGB 纹理&lt;/h5&gt;

&lt;p&gt;这是最后一步，将 Y 纹理和 UV 纹理转换为 RGB 编码格式。这个步骤苹果官方给出了转换矩阵，Unity 自身就套用这个矩阵进行了一次转换。&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;n&quot;&gt;float2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tex2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_textureY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ycbcr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tex2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_textureCbCr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;texcoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4x4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ycbcrToRGBTransform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3441&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7141&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5291&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8860&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ycbcrToRGBTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ycbcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;opengl-支持&quot;&gt;OpenGL 支持&lt;/h3&gt;

&lt;p&gt;在大概理解 Unity ARKit 插件的渲染原理之后，我们来看一下在 OpenGL Graphic API 上运行会有什么效果。&lt;/p&gt;

&lt;p&gt;在 Unity ARKit Plugin 项目的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Settings -&amp;gt; Player Settings&lt;/code&gt; 中将 Graphic API 设置为 OpenGL ES 2，然后导出 xcode 项目并且运行之后，我们看到屏幕上可以显示出特征点云，并且可以进行空间定位，但是摄像头的图像无法显示。这是为什么呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/unity-arkit-plugin-opengl/fix-1.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;原因猜测&quot;&gt;原因猜测&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ARKit 的空间定位功能仍然可用。&lt;/p&gt;

    &lt;p&gt;这表示 ARKit 的计算并不依赖于渲染方式，很可能只是利用了 GPU 的矩阵计算能力，但是不依赖于某些特定的 API。这个也和机器学习的利用 GPU 的方式类似，在运行基于 cuda 的代码时，与 OpenGL 绘制屏幕上其他部分的 GPU 使用并不冲突。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;屏幕渲染是绿色的。&lt;/p&gt;

    &lt;p&gt;这个原因肯定和 OpenGL 与 Metal 的区别有关。理解这个现象出现的原因，也就能定位显示的问题，从而解决它。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;问题排查以及解决&quot;&gt;问题排查以及解决&lt;/h4&gt;

&lt;p&gt;首先，检查一遍代码，将所有与渲染 API 有关的代码都找出来。这里接触到的代码非常少，但是有一个地方很容易被忽略的，就是 &lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Texture2D.CreateExternalTexture.html&quot;&gt;Texture2D.CreateExternalTexture&lt;/a&gt; 这个 API 的调用。&lt;/p&gt;

&lt;p&gt;如文档中所说的，这个函数只是储存一个纹理的指针，而不是将纹理复制出来。这样一来，在后面的 shader 计算中，便将 &lt;code class=&quot;highlighter-rouge&quot;&gt;MTLTexture&lt;/code&gt; 的指针传给了 OpenGL 的 API，难怪渲染会出错。我们就从这里开始解决。&lt;/p&gt;

&lt;h5 id=&quot;使用-opengl-api-提取-yuv-纹理&quot;&gt;使用 OpenGL API 提取 YUV 纹理&lt;/h5&gt;

&lt;p&gt;在参考了 &lt;a href=&quot;http://www.jianshu.com/u/e6367cf15710&quot;&gt;@handyTOOL&lt;/a&gt; 大神的 &lt;a href=&quot;http://www.jianshu.com/p/380df8ae273f&quot;&gt;ARKit &amp;amp; OpenGL ES - OpenGL实现篇&lt;/a&gt; 之后，用他博客中的代码替换掉了官方提供的获取 Metal Texture 的代码，具体解释见注释：&lt;/p&gt;

&lt;div class=&quot;language-objective_c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glYTexture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 检查 glYTexture 是否已经在 OpenGL 中初始化，如果尚未初始化则获取 handle.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;glGenTextures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glYTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glUVTexture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 检查 glUVTexture 是否已经在 OpenGL 中初始化，如果尚未初始化则获取 handle.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;glGenTextures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glUVTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 获取 Y panel 的宽高和内存地址&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CVPixelBufferGetWidthOfPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CVPixelBufferGetHeightOfPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CVPixelBufferGetBaseAddressOfPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// glBindTexture 将当前 OpenGL 处理的对象设为 glYTexture&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;glBindTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glYTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 用 GL_LUMINANCE 格式读出 baseAddress 指向的单通道 8 byte 的图片纹理&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;glTexImage2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_LUMINANCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_LUMINANCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_UNSIGNED_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// glBindTexture 将当前 OpenGL 处理的对象设为 空&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;glBindTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;textureWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CVPixelBufferGetWidthOfPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;textureHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CVPixelBufferGetHeightOfPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;laAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CVPixelBufferGetBaseAddressOfPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;glBindTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glUVTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 用 GL_LUMINANCE_ALPHA 格式读出 laAddress 指向的双通道 8 byte 的图片纹理&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 其中 U panel 的信息存在第一个通道中，对应 rgba 的 r 通道&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// V panel 的信息存在第四个通道中，对应 rgba 的 a 通道&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;glTexImage2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_LUMINANCE_ALPHA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_LUMINANCE_ALPHA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_UNSIGNED_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;laAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;glBindTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;将-opengl-纹理指针传回-unity&quot;&gt;将 OpenGL 纹理指针传回 Unity&lt;/h5&gt;

&lt;p&gt;同时，修改一下将指针传回 Unity 的代码：&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; extern &quot;C&quot; UnityARTextureHandles GetVideoTextureHandles()
 {
     UnityARTextureHandles handles;
&lt;span class=&quot;gd&quot;&gt;-    handles.textureY = (__bridge_retained void*)s_CapturedImageTextureY;
-    handles.textureCbCr = (__bridge_retained void*)s_CapturedImageTextureCbCr;
-
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    if (UnitySelectedRenderingAPI() == apiOpenGLES2 ) {
+        handles.textureY = (void*) glYTexture;
+        handles.textureCbCr = (void*) glUVTexture;
+    }
+    else {
+        handles.textureY = (__bridge_retained void*)s_CapturedImageTextureY;
+        handles.textureCbCr = (__bridge_retained void*)s_CapturedImageTextureCbCr;
+    }
&lt;/span&gt;     return handles;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是，如果是使用 Metal API，是将 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&amp;lt;MTLTexture&amp;gt;&lt;/code&gt; 类型转换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;void *&lt;/code&gt; 类型，两者都是指针。当使用 OpenGL API 时，是将 &lt;code class=&quot;highlighter-rouge&quot;&gt;GLuint&lt;/code&gt; 转换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;void *&lt;/code&gt; 类型。&lt;code class=&quot;highlighter-rouge&quot;&gt;GLuint&lt;/code&gt; 在头文件定义中是 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned int&lt;/code&gt;，所以是将一个整数型存到指针类型中，不要将 &lt;code class=&quot;highlighter-rouge&quot;&gt;GLuint&lt;/code&gt; 的指针传回 Unity 了。&lt;/p&gt;

&lt;h5 id=&quot;opengl-相关的坐标变换&quot;&gt;OpenGL 相关的坐标变换&lt;/h5&gt;

&lt;p&gt;如果仅仅进行上述修改，我们发现屏幕上仍然无法正确显示出摄像头拍摄到的图像。我们将会看到如下画面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/unity-arkit-plugin-opengl/fix-2.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时这些图像会随着摄像头的移动而改变，说明摄像头的纹理已经提取出来了，只是渲染的时候出了问题。在尝试使用 Unity 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Unlit/Texture&lt;/code&gt; shader 进行渲染之后，发现 Y panel 和 UV panel 的纹理是正确的，图像显示出来是左旋90度的，所以应该是 shader 的计算过程中出了问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/unity-arkit-plugin-opengl/opengl-coordinates-1.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 debug shader 的过程中，我先将所有 shader 代码都简化为与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Unlit/Texture&lt;/code&gt; shader 一样，然后再一点点加回。此时发现，在加入旋转之后，图像就变成了如上图所示的条纹状。&lt;/p&gt;

&lt;p&gt;为了修复这个问题，我们需要调整一下 shader：&lt;/p&gt;

&lt;p&gt;先将纹理往 x 轴平移 1.0f：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/unity-arkit-plugin-opengl/opengl-coordinates-2.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再进行围绕(0,0) 旋转 90 度：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/unity-arkit-plugin-opengl/opengl-coordinates-3.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然这样操作可以正确地纠正图像，但是我并不太理解为什么不平移直接旋转 90 的话，会出现条纹状的图像。&lt;/p&gt;

&lt;h3 id=&quot;解决方法&quot;&gt;解决方法&lt;/h3&gt;

&lt;p&gt;在这边博客写下的时候，对于 OpenGL ES 2 的支持已经提交 Pull Request 给 Unity 的官方代码库了，暂未合并进 master 分支：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/Unity-Technologies/unity-arkit-plugin/pull-requests/6/support-opengl-es-2-as-the-rendering-api/diff&quot;&gt;Pull Request: Support OpenGL ES 2 as the rendering API&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;经验总结&quot;&gt;经验总结&lt;/h3&gt;

&lt;p&gt;在这个事件中，学到了：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;理解问题的原因是解决问题的第一步&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;在刚开始 debug shader 渲染的时候，由于之前没有前端开发的经验，我是以一种试试看的心态，调整各个参数试图找到合适的组合以求解决问题。但是这个试错的过程不仅繁杂，而且往往没有目的性，会浪费很多时间。最后还是花了时间学习了一些基本的 shader 知识后，理解了 shader 代码再进行修改的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;如果你看到这里，一定是真爱！欢迎看看我的其他 &lt;a href=&quot;http://chendi.me/&quot;&gt;blog&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Jul 2017 08:15:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/21/unity-arkit-plugin-opengl/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/21/unity-arkit-plugin-opengl/</guid>
        
        <category>Tech</category>
        
        <category>Unity</category>
        
        <category>ARKit</category>
        
        <category>OpenGL</category>
        
        
      </item>
    
      <item>
        <title>Weird bugs - 3</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“There is no coincidence. Only the illusion of coincidence.”&lt;/p&gt;

  &lt;p&gt;– Alan Moore, V for Vendetta, Vol. III of X&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在这几年的开发生涯中，遇到了或多或少的奇怪的BUG。计算机不会撒谎，让人感到奇怪的 Bug 底下，一定有自己没搞明白的知识。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;unity-脚本挂载丢失&quot;&gt;Unity 脚本挂载丢失&lt;/h2&gt;

&lt;h3 id=&quot;问题表象&quot;&gt;问题表象&lt;/h3&gt;

&lt;p&gt;在最近开发的项目中，我们使用了 Unity3D 作为我们的游戏开发引擎，并且使用 git 作为我们的版本控制软件。由于我们有多位 Unity3D 工程师，大家不可避免地需要从 git 上提交，合并，拉取最新的代码。而在 Unity 开发中，常常会需要挂载一个 C# 脚本到某个 prefab 或者 GameObject 上。当一个脚本挂载上去之后，其他团队成员从 git 上拉取或者复制最新代码下来之后，经常会见到下面这个非常令人崩溃的提示：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/in-post/weird-bug-3/missing-mono-1.jpg&quot;&gt;&lt;img src=&quot;/img/in-post/weird-bug-3/missing-mono-1.jpg&quot; alt=&quot;Missing Mono Script&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个提示就表示 Unity Editor 无法找到挂载的相应脚本，如果此时运行游戏或者打包游戏，游戏中对应脚本的逻辑便不会执行。QA 就会提出 bug （xxx 功能怎么丢了）。&lt;/p&gt;

&lt;p&gt;这个情况在我们开发的时候经常出现，特别是我们使用了 Leancloud 作为我们的聊天服务提供商，他们提供的 Unity SDK 便要求挂载一个 dll 中的脚本到场景中。由于脚本挂载在版本管理是一直丢失，我们的聊天功能也时灵时不灵。&lt;/p&gt;

&lt;h3 id=&quot;问题探究&quot;&gt;问题探究&lt;/h3&gt;

&lt;h4 id=&quot;unity-脚本挂载原理&quot;&gt;Unity 脚本挂载原理&lt;/h4&gt;

&lt;p&gt;要解决这个问题，首先我们要理解 Unity 中脚本挂载的原理，Unity Editor 是靠什么来储存这个脚本挂载的联系的呢？&lt;/p&gt;

&lt;p&gt;在搜索了 Unity 官方论坛中的众多问题之后，大家的讨论都指向了一个叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;guid&lt;/code&gt; 的属性，例如 &lt;a href=&quot;https://forum.unity3d.com/threads/missing-mono-script.455228/&quot;&gt;这个讨论&lt;/a&gt;。在搜索项目之后，我发现所有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.cs.meta&lt;/code&gt; 文件中都储存了 &lt;code class=&quot;highlighter-rouge&quot;&gt;guid&lt;/code&gt; 属性，也就是说，prefab 是利用这个 GUID 来寻找应该挂载的脚本的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fileFormatVersion: 2
guid: dd3e3945400194edfbe0c7a06d89b145
MonoImporter:
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么，是不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.cs.meta&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;guid&lt;/code&gt; 的值在版本控制之间变更了呢？恰恰相反。由于我们挂载的是 dll 文件，&lt;code class=&quot;highlighter-rouge&quot;&gt;.dll.meta&lt;/code&gt; 文件在版本控制中一直没有变化过。那么这就说明一定是引用这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;guid&lt;/code&gt; 的地方变化了。那么 prefab 引用 &lt;code class=&quot;highlighter-rouge&quot;&gt;guid&lt;/code&gt; 的信息储存在哪呢？&lt;/p&gt;

&lt;p&gt;我尝试使用各种方法打开 &lt;code class=&quot;highlighter-rouge&quot;&gt;.prefab&lt;/code&gt; 文件，但是没有办法在其中找到 &lt;code class=&quot;highlighter-rouge&quot;&gt;GUID&lt;/code&gt; 的对应行列，并且 &lt;code class=&quot;highlighter-rouge&quot;&gt;.prefab&lt;/code&gt; 文件是二进制的，无法理解。在 Unity 官方论坛中查询许久之后发现了 &lt;a href=&quot;http://answers.unity3d.com/questions/222281/asset-serialization-mixed-vs-force-text.html&quot;&gt;这个关于 Force Text 的讨论&lt;/a&gt;，其中提到了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Force Text&lt;/code&gt; 设置。在尝试之后发现，通过更改 &lt;code class=&quot;highlighter-rouge&quot;&gt;ProjectSettings -&amp;gt; Editor -&amp;gt; Asset Serialization&lt;/code&gt; 至 &lt;code class=&quot;highlighter-rouge&quot;&gt;Force Text&lt;/code&gt;，原本是二进制的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.prefab&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;.unity&lt;/code&gt; 文件都变成了 yaml 编码的文本文件，在其中，可以很轻易地定位到 &lt;code class=&quot;highlighter-rouge&quot;&gt;guid&lt;/code&gt; 的引用位置，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- !u!114 &amp;amp;60726417
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_PrefabParentObject: {fileID: 114000011878044986, guid: 7d74d246c03b90c47bd7b1563e473a9f,
    type: 2}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 60726415}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: dd3e3945400194edfbe0c7a06d89b145, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
--- !u!114 &amp;amp;60726418
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;m_Script&lt;/code&gt; 的 guid 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;.cd.meta&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;guid&lt;/code&gt; 是相对应的。如此一来，只要保证两边的 guid 不发生变化就可以保持脚本挂载的不丢失了。&lt;/p&gt;

&lt;h4 id=&quot;脚本-guid-的变化方式&quot;&gt;脚本 guid 的变化方式&lt;/h4&gt;

&lt;p&gt;由于聊天组件并不是经常变更的东西，但是每次更新都会丢失脚本挂载，所以还需要理解 guid 在什么时候会发生改变。&lt;/p&gt;

&lt;p&gt;我们发现有这么几种情况会更改 guid:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;脚本内容更改。&lt;/li&gt;
  &lt;li&gt;场景内容更改。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dll 文件在不同平台上重新导入，例如 Windows vs. Mac OS&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中第三点才是我们的罪魁祸首，由于我们的开发环境包括 Mac OS 和 Windows，所以在项目更新的时候，同一个 dll 文件在不同平台导入的时候，都会更新一次 .meta 文件，同时更新场景中的引用 guid。但是在提交修改的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;.dll.meta&lt;/code&gt; 的更新并没有被提交，只提交了场景的更新，这就导致了场景引用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;guid&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;.dll.meta&lt;/code&gt; 不相符，从而导致了脚本丢失。&lt;/p&gt;

&lt;h3 id=&quot;解决方法&quot;&gt;解决方法&lt;/h3&gt;

&lt;p&gt;最后，我们的解决方案分成三个部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;独立出挂载 dll 脚本的场景，不与经常修改的场景融合，从而相关的修改。&lt;/li&gt;
  &lt;li&gt;项目设置中，全部使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Force Text&lt;/code&gt; 模式。&lt;/li&gt;
  &lt;li&gt;代码审核时，检查 prefab 和场景的修改，是否修改了 guid，如果修改了，检查是否必要。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;经验总结&quot;&gt;经验总结&lt;/h3&gt;

&lt;p&gt;在这个事件中，学到了这么几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Unity 项目管理在进行版本控制时，尽量选择 &lt;code class=&quot;highlighter-rouge&quot;&gt;Force Text&lt;/code&gt; 模式，并进行代码审核&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;在使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Force Text&lt;/code&gt; 模式之前，我们项目的代码审核遇到 prefab 修改或者场景修改时，往往无法审核修改内容，因为二进制文件无法被代码审核插件读取，如下图。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/img/in-post/weird-bug-3/diff-1.png&quot;&gt;&lt;img src=&quot;/img/in-post/weird-bug-3/diff-1.png&quot; alt=&quot;Git Diff 1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;在使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Force Text&lt;/code&gt; 模式之后，代码审核就可以清晰地看到修改的部分，甚至可以自动合并冲突，是两个人或者多人合作修改同一个场景。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/img/in-post/weird-bug-3/diff-2.png&quot;&gt;&lt;img src=&quot;/img/in-post/weird-bug-3/diff-2.png&quot; alt=&quot;Git Diff 2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;这个问题解决之后，也节约了开发者大量用来同步代码和场景的时间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You are not alone.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Unity3D 是一个相对成熟的游戏开发引擎，往往我们遇到的问题都已经有人遇到过了，所以解决问题时很重要一步还是寻找前人的轨迹。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;事出蹊跷必有妖&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;计算机是不会骗人的，所谓的 ”莫名其妙“ 一定有办法可以解释，找到它。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;推荐阅读&quot;&gt;推荐阅读&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://answers.unity3d.com/questions/222281/asset-serialization-mixed-vs-force-text.html&quot;&gt;关于 Force Text 的讨论&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://devmag.org.za/2012/07/12/50-tips-for-working-with-unity-best-practices/&quot;&gt;关于 Unity 的 50 个技巧&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;如果你看到这里，一定是真爱！欢迎看看我的其他 &lt;a href=&quot;http://chendi.me/&quot;&gt;blog&lt;/a&gt;。O(∩_∩)O&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Jun 2017 08:15:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/11/weird-bugs-3/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/11/weird-bugs-3/</guid>
        
        <category>Tech</category>
        
        <category>Bug</category>
        
        <category>Unity</category>
        
        <category>git</category>
        
        
      </item>
    
  </channel>
</rss>
